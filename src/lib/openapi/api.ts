/* tslint:disable */
/* eslint-disable */
/**
 * Open SB Career Website Admin API
 * <b>Quy trình các bước thực hiện sinh token để sử dụng Opent API:</b><br>Bước 1: Sinh token bằng api Login và sao chép kết quả token đoạn mã api trả ra<br>Bước 2: Xác thực Authorize bằng mã token đã sao chép bằng nút Authorize<br>Bước 3: Thực hiện gọi các api <br>----------------------------------------------------------------------
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiBaseRequestBody
 */
export interface ApiBaseRequestBody {
    /**
     * Lấy bản ghi từ trang
     * @type {number}
     * @memberof ApiBaseRequestBody
     */
    'start'?: number;
    /**
     * Số lượng bản ghi tối đa
     * @type {number}
     * @memberof ApiBaseRequestBody
     */
    'limit'?: number;
    /**
     * Từ khóa tìm kiếm
     * @type {string}
     * @memberof ApiBaseRequestBody
     */
    'keywords'?: string;
    /**
     * Tên field để sắp xếp bản ghi khi lấy dữ liệu
     * @type {string}
     * @memberof ApiBaseRequestBody
     */
    'sortField'?: string;
    /**
     * Loại sắp xếp ( ASC hoặc DESC)
     * @type {string}
     * @memberof ApiBaseRequestBody
     */
    'sortType'?: string;
    /**
     * Có lấy tổng số bản ghi hay không
     * @type {boolean}
     * @memberof ApiBaseRequestBody
     */
    'count'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiGetPostRequest
 */
export interface ApiGetPostRequest {
    /**
     * Lấy bản ghi từ trang
     * @type {number}
     * @memberof ApiGetPostRequest
     */
    'start'?: number;
    /**
     * Số lượng bản ghi tối đa
     * @type {number}
     * @memberof ApiGetPostRequest
     */
    'limit'?: number;
    /**
     * Từ khóa tìm kiếm
     * @type {string}
     * @memberof ApiGetPostRequest
     */
    'keywords'?: string;
    /**
     * Tên field để sắp xếp bản ghi khi lấy dữ liệu
     * @type {string}
     * @memberof ApiGetPostRequest
     */
    'sortField'?: string;
    /**
     * Loại sắp xếp ( ASC hoặc DESC)
     * @type {string}
     * @memberof ApiGetPostRequest
     */
    'sortType'?: string;
    /**
     * Trạng thái bài viết: \'DRAFT\',\'ACTIVE\',\'DELETED\',\'INACTIVE\'
     * @type {string}
     * @memberof ApiGetPostRequest
     */
    'state'?: ApiGetPostRequestStateEnum;
    /**
     * Lọc theo một mảng các danh mục
     * @type {number}
     * @memberof ApiGetPostRequest
     */
    'categories'?: number;
    /**
     * Ngày bắt đầu
     * @type {string}
     * @memberof ApiGetPostRequest
     */
    'startDate'?: string;
    /**
     * Ngày kết thúc
     * @type {string}
     * @memberof ApiGetPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiGetPostRequest
     */
    'stick'?: boolean;
}

export const ApiGetPostRequestStateEnum = {
    Draft: 'DRAFT',
    Active: 'ACTIVE',
    Deleted: 'DELETED',
    Inactive: 'INACTIVE'
} as const;

export type ApiGetPostRequestStateEnum = typeof ApiGetPostRequestStateEnum[keyof typeof ApiGetPostRequestStateEnum];

/**
 * 
 * @export
 * @interface ApiGetSurveyAnswerRequest
 */
export interface ApiGetSurveyAnswerRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiGetSurveyAnswerRequest
     */
    'surveyQuestionId'?: number;
}
/**
 * 
 * @export
 * @interface ApiGetSurveyQuestionRequest
 */
export interface ApiGetSurveyQuestionRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiGetSurveyQuestionRequest
     */
    'surveysId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiGetSurveyQuestionRequest
     */
    'question'?: string;
}
/**
 * 
 * @export
 * @interface ApiGetSurveyRequest
 */
export interface ApiGetSurveyRequest {
    /**
     * Lấy bản ghi từ trang
     * @type {number}
     * @memberof ApiGetSurveyRequest
     */
    'start'?: number;
    /**
     * Số lượng bản ghi tối đa
     * @type {number}
     * @memberof ApiGetSurveyRequest
     */
    'limit'?: number;
    /**
     * Từ khóa tìm kiếm
     * @type {string}
     * @memberof ApiGetSurveyRequest
     */
    'keywords'?: string;
    /**
     * Tên field để sắp xếp bản ghi khi lấy dữ liệu
     * @type {string}
     * @memberof ApiGetSurveyRequest
     */
    'sortField'?: string;
    /**
     * Loại sắp xếp ( ASC hoặc DESC)
     * @type {string}
     * @memberof ApiGetSurveyRequest
     */
    'sortType'?: string;
    /**
     * Lọc theo trang thái ACTIVE, INACTIVE
     * @type {string}
     * @memberof ApiGetSurveyRequest
     */
    'state'?: string;
    /**
     * Ngày bắt đầu
     * @type {string}
     * @memberof ApiGetSurveyRequest
     */
    'startDate'?: string;
    /**
     * Ngày kết thúc
     * @type {string}
     * @memberof ApiGetSurveyRequest
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface ApiGetSurveyResultRequest
 */
export interface ApiGetSurveyResultRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiGetSurveyResultRequest
     */
    'surveyAnswerId'?: number;
}
/**
 * 
 * @export
 * @interface Applicant
 */
export interface Applicant {
    /**
     * Mã hồ sơ ứng tuyển
     * @type {number}
     * @memberof Applicant
     */
    'id'?: number;
    /**
     * Thời gian tạo
     * @type {string}
     * @memberof Applicant
     */
    'createdTime'?: string;
    /**
     * Thời gian chỉnh sửa
     * @type {string}
     * @memberof Applicant
     */
    'modifiedTime'?: string;
    /**
     * Người tạo
     * @type {string}
     * @memberof Applicant
     */
    'createdBy'?: string;
    /**
     * Người chỉnh sửa
     * @type {string}
     * @memberof Applicant
     */
    'modifiedBy'?: string;
    /**
     * Ghi chú
     * @type {string}
     * @memberof Applicant
     */
    'note'?: string;
    /**
     * Email của người ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'email'?: string;
    /**
     * Mã thông tin đăng tuyển
     * @type {number}
     * @memberof Applicant
     */
    'recruitmentId'?: number;
    /**
     * Chú thích
     * @type {string}
     * @memberof Applicant
     */
    'description'?: string;
    /**
     * Địa chỉ nơi ở người ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'address'?: string;
    /**
     * Số điện thoại của người ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'phone'?: string;
    /**
     * Vị trí ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'job'?: string;
    /**
     * Tỉnh thành nơi ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'jobLocation'?: string;
    /**
     * Mục tiêu nghề nghiệp
     * @type {string}
     * @memberof Applicant
     */
    'jobTarget'?: string;
    /**
     * Nguồn hồ sơ ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'utmSource'?: string;
    /**
     * Phương thức truy cập SMS, email,...
     * @type {string}
     * @memberof Applicant
     */
    'utmMedium'?: string;
    /**
     * Tên chiến dịch
     * @type {string}
     * @memberof Applicant
     */
    'utmCampaign'?: string;
    /**
     * loại nội dung quảng cáo- logo, banner
     * @type {string}
     * @memberof Applicant
     */
    'utmContent'?: string;
    /**
     * từ khóa quảng cáo
     * @type {string}
     * @memberof Applicant
     */
    'utmTerm'?: string;
    /**
     * Tên của người ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'lastName'?: string;
    /**
     * Họ và đệm của người ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'firstName'?: string;
    /**
     * Tên tỉnh/ thành phố nơi ở của người ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'province'?: string;
    /**
     * Ảnh của ứng viên
     * @type {string}
     * @memberof Applicant
     */
    'avatarUrl'?: string;
    /**
     * giới tính
     * @type {string}
     * @memberof Applicant
     */
    'gender'?: string;
    /**
     * Tình trạng hôn nhân
     * @type {string}
     * @memberof Applicant
     */
    'maritalStatus'?: string;
    /**
     * Ngày sinh
     * @type {string}
     * @memberof Applicant
     */
    'dob'?: string;
    /**
     * Bằng cấp người ứng tuyển
     * @type {Array<string>}
     * @memberof Applicant
     */
    'qualifications'?: Array<string>;
    /**
     * Công việc đã từng làm
     * @type {string}
     * @memberof Applicant
     */
    'jobWorked'?: string;
    /**
     * Số năm kinh nghiệm
     * @type {string}
     * @memberof Applicant
     */
    'yearExperience'?: string;
    /**
     * Cấp bậc vị trí ứng tuyển
     * @type {string}
     * @memberof Applicant
     */
    'occupationalCategory'?: string;
    /**
     * Mã công việc
     * @type {string}
     * @memberof Applicant
     */
    'recruitments_code'?: string;
    /**
     * Họ và tên
     * @type {string}
     * @memberof Applicant
     */
    'fullName'?: string;
}
/**
 * 
 * @export
 * @interface ApplicantRequestBody
 */
export interface ApplicantRequestBody {
    /**
     * Ghi chú
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'note'?: string;
    /**
     * Email của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'email': string;
    /**
     * Mã thông tin đăng tuyển
     * @type {number}
     * @memberof ApplicantRequestBody
     */
    'recruitmentId': number;
    /**
     * Chú thích
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'description'?: string;
    /**
     * Địa chỉ nơi ở người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'address': string;
    /**
     * Số điện thoại của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'phone': string;
    /**
     * Vị trí ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'job': string;
    /**
     * Tỉnh thành nơi ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'jobLocation'?: string;
    /**
     * Mục tiêu nghề nghiệp
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'jobTarget': string;
    /**
     * Nguồn hồ sơ ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'utmSource'?: string;
    /**
     * Phương thức truy cập SMS, email,...
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'utmMedium'?: string;
    /**
     * Tên chiến dịch
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'utmCampaign'?: string;
    /**
     * loại nội dung quảng cáo- logo, banner
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'utmContent'?: string;
    /**
     * từ khóa quảng cáo
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'utmTerm'?: string;
    /**
     * Tên của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'lastName': string;
    /**
     * Họ và đệm của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'firstName': string;
    /**
     * Tên tỉnh/ thành phố nơi ở của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'province': string;
    /**
     * Ảnh của ứng viên
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'avatarUrl': string;
    /**
     * giới tính
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'gender'?: string;
    /**
     * Tình trạng hôn nhân
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'maritalStatus'?: string;
    /**
     * Ngày sinh
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'dob'?: string;
    /**
     * Bằng cấp người ứng tuyển
     * @type {Array<string>}
     * @memberof ApplicantRequestBody
     */
    'qualifications': Array<string>;
    /**
     * Công việc đã từng làm
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'jobWorked': string;
    /**
     * Số năm kinh nghiệm
     * @type {number}
     * @memberof ApplicantRequestBody
     */
    'yearExperience': number;
    /**
     * Cấp bậc vị trí ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestBody
     */
    'occupationalCategory': string;
}
/**
 * 
 * @export
 * @interface ApplicantRequestUpdateBody
 */
export interface ApplicantRequestUpdateBody {
    /**
     * Ghi chú
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'note'?: string;
    /**
     * Email của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'email': string;
    /**
     * Mã thông tin đăng tuyển
     * @type {number}
     * @memberof ApplicantRequestUpdateBody
     */
    'recruitmentId': number;
    /**
     * Chú thích
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'description'?: string;
    /**
     * Địa chỉ nơi ở người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'address': string;
    /**
     * Số điện thoại của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'phone': string;
    /**
     * Vị trí ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'job': string;
    /**
     * Tỉnh thành nơi ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'jobLocation'?: string;
    /**
     * Mục tiêu nghề nghiệp
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'jobTarget': string;
    /**
     * Nguồn hồ sơ ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'utmSource'?: string;
    /**
     * Phương thức truy cập SMS, email,...
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'utmMedium'?: string;
    /**
     * Tên chiến dịch
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'utmCampaign'?: string;
    /**
     * loại nội dung quảng cáo- logo, banner
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'utmContent'?: string;
    /**
     * từ khóa quảng cáo
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'utmTerm'?: string;
    /**
     * Tên của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'lastName': string;
    /**
     * Họ và đệm của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'firstName': string;
    /**
     * Tên tỉnh/ thành phố nơi ở của người ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'province': string;
    /**
     * Ảnh của ứng viên
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'avatarUrl': string;
    /**
     * giới tính
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'gender'?: string;
    /**
     * Tình trạng hôn nhân
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'maritalStatus'?: string;
    /**
     * Ngày sinh
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'dob'?: string;
    /**
     * Bằng cấp người ứng tuyển
     * @type {Array<string>}
     * @memberof ApplicantRequestUpdateBody
     */
    'qualifications': Array<string>;
    /**
     * Công việc đã từng làm
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'jobWorked': string;
    /**
     * Số năm kinh nghiệm
     * @type {number}
     * @memberof ApplicantRequestUpdateBody
     */
    'yearExperience': number;
    /**
     * Cấp bậc vị trí ứng tuyển
     * @type {string}
     * @memberof ApplicantRequestUpdateBody
     */
    'occupationalCategory': string;
    /**
     * Mã thông tin hồ sơ ứng tuyển
     * @type {number}
     * @memberof ApplicantRequestUpdateBody
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface ApplicantRequestUpdateBodyAllOf
 */
export interface ApplicantRequestUpdateBodyAllOf {
    /**
     * Mã thông tin hồ sơ ứng tuyển
     * @type {number}
     * @memberof ApplicantRequestUpdateBodyAllOf
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface Banners
 */
export interface Banners {
    /**
     * id banner
     * @type {number}
     * @memberof Banners
     */
    'id'?: number;
    /**
     * Tên banner
     * @type {string}
     * @memberof Banners
     */
    'name'?: string;
    /**
     * Đường dẫn ảnh banner
     * @type {string}
     * @memberof Banners
     */
    'fileUrl'?: string;
    /**
     * Đường dẫn bài viết khi click vào banner image
     * @type {string}
     * @memberof Banners
     */
    'targetUrl'?: string;
    /**
     * Đường dẫn ảnh icon banner
     * @type {string}
     * @memberof Banners
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Banners
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Banners
     */
    'modifiedTime'?: string;
    /**
     * Người tạo
     * @type {string}
     * @memberof Banners
     */
    'createdBy'?: string;
    /**
     * Người thay đổi
     * @type {string}
     * @memberof Banners
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Banners
     */
    'public'?: boolean;
    /**
     * Thứ tự sắp xếp banner hiển thị trên trang chủ
     * @type {number}
     * @memberof Banners
     */
    'ordering'?: number;
    /**
     * Định dạng file
     * @type {string}
     * @memberof Banners
     */
    'mimeType'?: string;
    /**
     * Thời gian hiển thị banner
     * @type {number}
     * @memberof Banners
     */
    'duration'?: number;
    /**
     * Nội dung banner
     * @type {string}
     * @memberof Banners
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface BaseDataItemResponse
 */
export interface BaseDataItemResponse {
    /**
     * 
     * @type {boolean}
     * @memberof BaseDataItemResponse
     */
    'success': boolean;
    /**
     * 
     * @type {object}
     * @memberof BaseDataItemResponse
     */
    'data'?: object;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof BaseDataItemResponse
     */
    'error'?: BaseDataItemResponseFailedError;
}
/**
 * 
 * @export
 * @interface BaseDataItemResponseFailed
 */
export interface BaseDataItemResponseFailed {
    /**
     * 
     * @type {boolean}
     * @memberof BaseDataItemResponseFailed
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof BaseDataItemResponseFailed
     */
    'error'?: BaseDataItemResponseFailedError;
}
/**
 * 
 * @export
 * @interface BaseDataItemResponseFailedError
 */
export interface BaseDataItemResponseFailedError {
    /**
     * 
     * @type {string}
     * @memberof BaseDataItemResponseFailedError
     */
    'message'?: string;
    /**
     * 
     * @type {Array<BaseDataItemResponseFailedErrorErrorsInner>}
     * @memberof BaseDataItemResponseFailedError
     */
    'errors'?: Array<BaseDataItemResponseFailedErrorErrorsInner>;
}
/**
 * 
 * @export
 * @interface BaseDataItemResponseFailedErrorErrorsInner
 */
export interface BaseDataItemResponseFailedErrorErrorsInner {
    /**
     * 
     * @type {string}
     * @memberof BaseDataItemResponseFailedErrorErrorsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseDataItemResponseFailedErrorErrorsInner
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseDataItemResponseFailedErrorErrorsInner
     */
    'code'?: BaseDataItemResponseFailedErrorErrorsInnerCodeEnum;
}

export const BaseDataItemResponseFailedErrorErrorsInnerCodeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_405: 405,
    NUMBER_406: 406,
    NUMBER_500: 500,
    NUMBER_502: 502,
    NUMBER_503: 503,
    NUMBER_504: 504,
    NUMBER_410: 410,
    NUMBER_422: 422
} as const;

export type BaseDataItemResponseFailedErrorErrorsInnerCodeEnum = typeof BaseDataItemResponseFailedErrorErrorsInnerCodeEnum[keyof typeof BaseDataItemResponseFailedErrorErrorsInnerCodeEnum];

/**
 * 
 * @export
 * @interface BaseDataItemResponseSuccess
 */
export interface BaseDataItemResponseSuccess {
    /**
     * 
     * @type {boolean}
     * @memberof BaseDataItemResponseSuccess
     */
    'success'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof BaseDataItemResponseSuccess
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface BaseDataListResponse
 */
export interface BaseDataListResponse {
    /**
     * 
     * @type {boolean}
     * @memberof BaseDataListResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof BaseDataListResponse
     */
    'data'?: object;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof BaseDataListResponse
     */
    'error'?: BaseDataItemResponseFailedError;
}
/**
 * 
 * @export
 * @interface BaseMasterData
 */
export interface BaseMasterData {
    /**
     * id mdm
     * @type {string}
     * @memberof BaseMasterData
     */
    'id'?: string;
    /**
     * Tên mdm
     * @type {string}
     * @memberof BaseMasterData
     */
    'name'?: string;
    /**
     * mã id parent
     * @type {string}
     * @memberof BaseMasterData
     */
    'parentId'?: string;
    /**
     * tên mdm parent
     * @type {string}
     * @memberof BaseMasterData
     */
    'parentType'?: string;
}
/**
 * 
 * @export
 * @interface BaseRequestBody
 */
export interface BaseRequestBody {
    /**
     * Lấy bản ghi từ trang
     * @type {number}
     * @memberof BaseRequestBody
     */
    'start'?: number;
    /**
     * Số lượng bản ghi tối đa
     * @type {number}
     * @memberof BaseRequestBody
     */
    'limit'?: number;
    /**
     * Từ khóa tìm kiếm
     * @type {string}
     * @memberof BaseRequestBody
     */
    'keywords'?: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'modifiedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface CategoryRequestBody
 */
export interface CategoryRequestBody {
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestBody
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestBody
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestBody
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CategoryRequestUpdateBody
 */
export interface CategoryRequestUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestUpdateBody
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestUpdateBody
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestUpdateBody
     */
    'description': string;
    /**
     * Mã danh mục
     * @type {number}
     * @memberof CategoryRequestUpdateBody
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CategoryRequestUpdateBodyAllOf
 */
export interface CategoryRequestUpdateBodyAllOf {
    /**
     * Mã danh mục
     * @type {number}
     * @memberof CategoryRequestUpdateBodyAllOf
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface CreateBannerRequest
 */
export interface CreateBannerRequest {
    /**
     * Tên banner
     * @type {string}
     * @memberof CreateBannerRequest
     */
    'name'?: string;
    /**
     * Đường dẫn ảnh banner
     * @type {string}
     * @memberof CreateBannerRequest
     */
    'fileUrl'?: string;
    /**
     * Đường dẫn bài viết khi click vào banner image
     * @type {string}
     * @memberof CreateBannerRequest
     */
    'targetUrl'?: string;
    /**
     * Đường dẫn bài viết khi click vào banner image
     * @type {string}
     * @memberof CreateBannerRequest
     */
    'iconUrl'?: string;
    /**
     * Định dạng banner
     * @type {string}
     * @memberof CreateBannerRequest
     */
    'mimeType'?: string;
    /**
     * Thời gian hiển thị banner
     * @type {number}
     * @memberof CreateBannerRequest
     */
    'duration'?: number;
    /**
     * Nội dung banner
     * @type {string}
     * @memberof CreateBannerRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface CreateBannerResponse
 */
export interface CreateBannerResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateBannerResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof CreateBannerResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Banners}
     * @memberof CreateBannerResponse
     */
    'data'?: Banners;
}
/**
 * 
 * @export
 * @interface CreateBannerResponseAllOf
 */
export interface CreateBannerResponseAllOf {
    /**
     * 
     * @type {Banners}
     * @memberof CreateBannerResponseAllOf
     */
    'data'?: Banners;
}
/**
 * 
 * @export
 * @interface CreateRecruitmentRequest
 */
export interface CreateRecruitmentRequest {
    /**
     * Mã công việc do người quản trị tự nhập
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'code': string;
    /**
     * Chức danh/ vị trí tuyển dụng
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'jobTitle': string;
    /**
     * mô tả khác về công việc
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'description': string;
    /**
     * Mô tả về yêu cầu kinh nghiệm công việc
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'experienceRequirementDescriptions': string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof CreateRecruitmentRequest
     */
    'industry': Array<string>;
    /**
     * Loại lương: thỏa thuận, gross, net
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'salaryType'?: string;
    /**
     * Đơn vị tiền tệ
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'salaryCurrency'?: string;
    /**
     * Lương tối thiểu
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'salaryMinValue'?: number;
    /**
     * Lương tối đa
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'salaryMaxValue'?: number;
    /**
     * Hình thức công việc: chính thức, parttime,...
     * @type {Array<string>}
     * @memberof CreateRecruitmentRequest
     */
    'employmentTypes': Array<string>;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'validThrough': string;
    /**
     * Phúc lợi công việc
     * @type {Array<string>}
     * @memberof CreateRecruitmentRequest
     */
    'jobBenefits': Array<string>;
    /**
     * giới tính
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'gender': string;
    /**
     * Độ tuổi tối thiểu
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'ageFrom'?: number;
    /**
     * Độ tuổi tối đa
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'ageTo'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối thiểu
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'monthsOfExperienceFrom'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối đa
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'monthsOfExperienceTo'?: number;
    /**
     * Loại kinh nghiệm yêu cầu: lâu năm, mới,...
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'experienceRequirementsType'?: string;
    /**
     * cấp bậc
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'occupationalCategory': string;
    /**
     * bằng cấp
     * @type {Array<string>}
     * @memberof CreateRecruitmentRequest
     */
    'qualifications': Array<string>;
    /**
     * Kỹ năng yêu cầu (người dùng tự nhập)
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'skills'?: string;
    /**
     * Ghi chú của người quản trị về thông tin đăng tuyển
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'note'?: string;
    /**
     * Lý do đăng tin tuyển dụng
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'reasonJobPostings'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof CreateRecruitmentRequest
     */
    'jobLocations'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof CreateRecruitmentRequest
     */
    'departments'?: Array<string>;
    /**
     * Địa chỉ nơi làm việc
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'jobAddress'?: string;
    /**
     * Hình thức trả lương
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'payroll'?: string;
    /**
     * Số lượng cần tuyển
     * @type {number}
     * @memberof CreateRecruitmentRequest
     */
    'jobAmount': number;
    /**
     * Trạng thái thông tin tuyển dụng
     * @type {string}
     * @memberof CreateRecruitmentRequest
     */
    'state'?: CreateRecruitmentRequestStateEnum;
}

export const CreateRecruitmentRequestStateEnum = {
    Pending: 'PENDING',
    WattingApproved: 'WATTING_APPROVED',
    SendBack: 'SEND_BACK',
    Rejected: 'REJECTED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type CreateRecruitmentRequestStateEnum = typeof CreateRecruitmentRequestStateEnum[keyof typeof CreateRecruitmentRequestStateEnum];

/**
 * 
 * @export
 * @interface CreateRecruitmentRequestAllOf
 */
export interface CreateRecruitmentRequestAllOf {
    /**
     * Số lượng cần tuyển
     * @type {number}
     * @memberof CreateRecruitmentRequestAllOf
     */
    'jobAmount'?: number;
    /**
     * Trạng thái thông tin tuyển dụng
     * @type {string}
     * @memberof CreateRecruitmentRequestAllOf
     */
    'state'?: CreateRecruitmentRequestAllOfStateEnum;
}

export const CreateRecruitmentRequestAllOfStateEnum = {
    Pending: 'PENDING',
    WattingApproved: 'WATTING_APPROVED',
    SendBack: 'SEND_BACK',
    Rejected: 'REJECTED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type CreateRecruitmentRequestAllOfStateEnum = typeof CreateRecruitmentRequestAllOfStateEnum[keyof typeof CreateRecruitmentRequestAllOfStateEnum];

/**
 * 
 * @export
 * @interface CreateRecruitmentResponse
 */
export interface CreateRecruitmentResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateRecruitmentResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof CreateRecruitmentResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {RecruitmentData}
     * @memberof CreateRecruitmentResponse
     */
    'data'?: RecruitmentData;
}
/**
 * 
 * @export
 * @interface CreateRecruitmentResponseAllOf
 */
export interface CreateRecruitmentResponseAllOf {
    /**
     * 
     * @type {RecruitmentData}
     * @memberof CreateRecruitmentResponseAllOf
     */
    'data'?: RecruitmentData;
}
/**
 * 
 * @export
 * @interface CreateRecruitmentTemplateRequest
 */
export interface CreateRecruitmentTemplateRequest {
    /**
     * Mã công việc do người quản trị tự nhập
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'code': string;
    /**
     * Chức danh/ vị trí tuyển dụng
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'jobTitle': string;
    /**
     * mô tả khác về công việc
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'description': string;
    /**
     * Mô tả về yêu cầu kinh nghiệm công việc
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'experienceRequirementDescriptions': string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'industry': Array<string>;
    /**
     * Loại lương: thỏa thuận, gross, net
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'salaryType'?: string;
    /**
     * Đơn vị tiền tệ
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'salaryCurrency'?: string;
    /**
     * Lương tối thiểu
     * @type {number}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'salaryMinValue'?: number;
    /**
     * Lương tối đa
     * @type {number}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'salaryMaxValue'?: number;
    /**
     * Hình thức công việc: chính thức, parttime,...
     * @type {Array<string>}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'employmentTypes': Array<string>;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'validThrough': string;
    /**
     * Phúc lợi công việc
     * @type {Array<string>}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'jobBenefits': Array<string>;
    /**
     * giới tính
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'gender': string;
    /**
     * Độ tuổi tối thiểu
     * @type {number}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'ageFrom'?: number;
    /**
     * Độ tuổi tối đa
     * @type {number}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'ageTo'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối thiểu
     * @type {number}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'monthsOfExperienceFrom'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối đa
     * @type {number}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'monthsOfExperienceTo'?: number;
    /**
     * Loại kinh nghiệm yêu cầu: lâu năm, mới,...
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'experienceRequirementsType'?: string;
    /**
     * cấp bậc
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'occupationalCategory': string;
    /**
     * bằng cấp
     * @type {Array<string>}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'qualifications': Array<string>;
    /**
     * Kỹ năng yêu cầu (người dùng tự nhập)
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'skills'?: string;
    /**
     * Ghi chú của người quản trị về thông tin đăng tuyển
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'note'?: string;
    /**
     * Lý do đăng tin tuyển dụng
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'reasonJobPostings'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'jobLocations'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'departments'?: Array<string>;
    /**
     * Địa chỉ nơi làm việc
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'jobAddress'?: string;
    /**
     * Hình thức trả lương
     * @type {string}
     * @memberof CreateRecruitmentTemplateRequest
     */
    'payroll'?: string;
}
/**
 * 
 * @export
 * @interface CreateRecruitmentTemplateResponse
 */
export interface CreateRecruitmentTemplateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateRecruitmentTemplateResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof CreateRecruitmentTemplateResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {RecruitmentTemplateData}
     * @memberof CreateRecruitmentTemplateResponse
     */
    'data'?: RecruitmentTemplateData;
}
/**
 * 
 * @export
 * @interface CreateRecruitmentTemplateResponseAllOf
 */
export interface CreateRecruitmentTemplateResponseAllOf {
    /**
     * 
     * @type {RecruitmentTemplateData}
     * @memberof CreateRecruitmentTemplateResponseAllOf
     */
    'data'?: RecruitmentTemplateData;
}
/**
 * 
 * @export
 * @interface DeleteBannerRequest
 */
export interface DeleteBannerRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteBannerRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteBannerResponse
 */
export interface DeleteBannerResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteBannerResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof DeleteBannerResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {object}
     * @memberof DeleteBannerResponse
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface DeleteBannerResponseAllOf
 */
export interface DeleteBannerResponseAllOf {
    /**
     * 
     * @type {object}
     * @memberof DeleteBannerResponseAllOf
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface DeleteByIdsRequest
 */
export interface DeleteByIdsRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteByIdsRequest
     */
    'ids': Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteCategoryRequest
 */
export interface DeleteCategoryRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteCategoryRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteMediaFileDetail
 */
export interface DeleteMediaFileDetail {
    /**
     * Mã media file
     * @type {number}
     * @memberof DeleteMediaFileDetail
     */
    'id'?: number;
    /**
     * File name
     * @type {string}
     * @memberof DeleteMediaFileDetail
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteMediaFileRequest
 */
export interface DeleteMediaFileRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteMediaFileRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteMediaFileResponse
 */
export interface DeleteMediaFileResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteMediaFileResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof DeleteMediaFileResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {DeleteMediaFileResponseAllOfData}
     * @memberof DeleteMediaFileResponse
     */
    'data'?: DeleteMediaFileResponseAllOfData;
}
/**
 * 
 * @export
 * @interface DeleteMediaFileResponseAllOf
 */
export interface DeleteMediaFileResponseAllOf {
    /**
     * 
     * @type {DeleteMediaFileResponseAllOfData}
     * @memberof DeleteMediaFileResponseAllOf
     */
    'data'?: DeleteMediaFileResponseAllOfData;
}
/**
 * 
 * @export
 * @interface DeleteMediaFileResponseAllOfData
 */
export interface DeleteMediaFileResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof DeleteMediaFileResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<DeleteMediaFileDetail>}
     * @memberof DeleteMediaFileResponseAllOfData
     */
    'items'?: Array<DeleteMediaFileDetail>;
}
/**
 * 
 * @export
 * @interface DeleteMemberRequest
 */
export interface DeleteMemberRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteMemberRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteRecruitmentTemplatesResponse
 */
export interface DeleteRecruitmentTemplatesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteRecruitmentTemplatesResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof DeleteRecruitmentTemplatesResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {DeleteRecruitmentTemplatesResponseAllOfData}
     * @memberof DeleteRecruitmentTemplatesResponse
     */
    'data'?: DeleteRecruitmentTemplatesResponseAllOfData;
}
/**
 * 
 * @export
 * @interface DeleteRecruitmentTemplatesResponseAllOf
 */
export interface DeleteRecruitmentTemplatesResponseAllOf {
    /**
     * 
     * @type {DeleteRecruitmentTemplatesResponseAllOfData}
     * @memberof DeleteRecruitmentTemplatesResponseAllOf
     */
    'data'?: DeleteRecruitmentTemplatesResponseAllOfData;
}
/**
 * 
 * @export
 * @interface DeleteRecruitmentTemplatesResponseAllOfData
 */
export interface DeleteRecruitmentTemplatesResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof DeleteRecruitmentTemplatesResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<RecruitmentTemplateDeleteData>}
     * @memberof DeleteRecruitmentTemplatesResponseAllOfData
     */
    'items'?: Array<RecruitmentTemplateDeleteData>;
}
/**
 * 
 * @export
 * @interface DeleteRecruitmentsResponse
 */
export interface DeleteRecruitmentsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteRecruitmentsResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof DeleteRecruitmentsResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {DeleteRecruitmentsResponseAllOfData}
     * @memberof DeleteRecruitmentsResponse
     */
    'data'?: DeleteRecruitmentsResponseAllOfData;
}
/**
 * 
 * @export
 * @interface DeleteRecruitmentsResponseAllOf
 */
export interface DeleteRecruitmentsResponseAllOf {
    /**
     * 
     * @type {DeleteRecruitmentsResponseAllOfData}
     * @memberof DeleteRecruitmentsResponseAllOf
     */
    'data'?: DeleteRecruitmentsResponseAllOfData;
}
/**
 * 
 * @export
 * @interface DeleteRecruitmentsResponseAllOfData
 */
export interface DeleteRecruitmentsResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof DeleteRecruitmentsResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<RecruitmentDeleteData>}
     * @memberof DeleteRecruitmentsResponseAllOfData
     */
    'items'?: Array<RecruitmentDeleteData>;
}
/**
 * 
 * @export
 * @interface FileUpload
 */
export interface FileUpload {
    /**
     * id file
     * @type {string}
     * @memberof FileUpload
     */
    'id'?: string;
    /**
     * Tên file
     * @type {string}
     * @memberof FileUpload
     */
    'fileName'?: string;
    /**
     * url của file
     * @type {string}
     * @memberof FileUpload
     */
    'url'?: string;
    /**
     * Loại file
     * @type {string}
     * @memberof FileUpload
     */
    'mime'?: string;
    /**
     * size file
     * @type {number}
     * @memberof FileUpload
     */
    'fileSize'?: number;
    /**
     * url ảnh thumb
     * @type {string}
     * @memberof FileUpload
     */
    'icon'?: string;
    /**
     * id của ảnh thumb icon
     * @type {number}
     * @memberof FileUpload
     */
    'iconId'?: number;
}
/**
 * 
 * @export
 * @interface GetBannerByIdResponse
 */
export interface GetBannerByIdResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetBannerByIdResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetBannerByIdResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Banners}
     * @memberof GetBannerByIdResponse
     */
    'data'?: Banners;
}
/**
 * 
 * @export
 * @interface GetDetailApplicantResponse
 */
export interface GetDetailApplicantResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailApplicantResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailApplicantResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Applicant}
     * @memberof GetDetailApplicantResponse
     */
    'data'?: Applicant;
}
/**
 * 
 * @export
 * @interface GetDetailApplicantResponseAllOf
 */
export interface GetDetailApplicantResponseAllOf {
    /**
     * 
     * @type {Applicant}
     * @memberof GetDetailApplicantResponseAllOf
     */
    'data'?: Applicant;
}
/**
 * 
 * @export
 * @interface GetDetailCategoryResponse
 */
export interface GetDetailCategoryResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailCategoryResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailCategoryResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Category}
     * @memberof GetDetailCategoryResponse
     */
    'data'?: Category;
}
/**
 * 
 * @export
 * @interface GetDetailCategoryResponseAllOf
 */
export interface GetDetailCategoryResponseAllOf {
    /**
     * 
     * @type {Category}
     * @memberof GetDetailCategoryResponseAllOf
     */
    'data'?: Category;
}
/**
 * 
 * @export
 * @interface GetDetailMemberResponse
 */
export interface GetDetailMemberResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailMemberResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailMemberResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Members}
     * @memberof GetDetailMemberResponse
     */
    'data'?: Members;
}
/**
 * 
 * @export
 * @interface GetDetailMemberResponseAllOf
 */
export interface GetDetailMemberResponseAllOf {
    /**
     * 
     * @type {Members}
     * @memberof GetDetailMemberResponseAllOf
     */
    'data'?: Members;
}
/**
 * 
 * @export
 * @interface GetDetailPostPublicResponse
 */
export interface GetDetailPostPublicResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailPostPublicResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailPostPublicResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {PostDetailPublic}
     * @memberof GetDetailPostPublicResponse
     */
    'data'?: PostDetailPublic;
}
/**
 * 
 * @export
 * @interface GetDetailPostPublicResponseAllOf
 */
export interface GetDetailPostPublicResponseAllOf {
    /**
     * 
     * @type {PostDetailPublic}
     * @memberof GetDetailPostPublicResponseAllOf
     */
    'data'?: PostDetailPublic;
}
/**
 * 
 * @export
 * @interface GetDetailPostResponse
 */
export interface GetDetailPostResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailPostResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailPostResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Post}
     * @memberof GetDetailPostResponse
     */
    'data'?: Post;
}
/**
 * 
 * @export
 * @interface GetDetailPostResponseAllOf
 */
export interface GetDetailPostResponseAllOf {
    /**
     * 
     * @type {Post}
     * @memberof GetDetailPostResponseAllOf
     */
    'data'?: Post;
}
/**
 * 
 * @export
 * @interface GetDetailRecruitmentResponse
 */
export interface GetDetailRecruitmentResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailRecruitmentResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailRecruitmentResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Recruitment}
     * @memberof GetDetailRecruitmentResponse
     */
    'data'?: Recruitment;
}
/**
 * 
 * @export
 * @interface GetDetailRecruitmentResponseAllOf
 */
export interface GetDetailRecruitmentResponseAllOf {
    /**
     * 
     * @type {Recruitment}
     * @memberof GetDetailRecruitmentResponseAllOf
     */
    'data'?: Recruitment;
}
/**
 * 
 * @export
 * @interface GetDetailRecruitmentTemplateResponse
 */
export interface GetDetailRecruitmentTemplateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetDetailRecruitmentTemplateResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetDetailRecruitmentTemplateResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {RecruitmentTemplate}
     * @memberof GetDetailRecruitmentTemplateResponse
     */
    'data'?: RecruitmentTemplate;
}
/**
 * 
 * @export
 * @interface GetDetailRecruitmentTemplateResponseAllOf
 */
export interface GetDetailRecruitmentTemplateResponseAllOf {
    /**
     * 
     * @type {RecruitmentTemplate}
     * @memberof GetDetailRecruitmentTemplateResponseAllOf
     */
    'data'?: RecruitmentTemplate;
}
/**
 * 
 * @export
 * @interface GetListApplicantRequest
 */
export interface GetListApplicantRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListApplicantRequest
     */
    'industry'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListApplicantRequest
     */
    'jobTitle'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListApplicantRequest
     */
    'qualifications'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListApplicantRequest
     */
    'jobLocations'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListApplicantRequest
     */
    'occupationalCategory'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof GetListApplicantRequest
     */
    'viewed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetListApplicantRequest
     */
    'ageMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListApplicantRequest
     */
    'ageMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListApplicantRequest
     */
    'excperienceMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListApplicantRequest
     */
    'excperienceMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListApplicantRequest
     */
    'start'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListApplicantRequest
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface GetListApplicantResponse
 */
export interface GetListApplicantResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListApplicantResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListApplicantResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListApplicantResponseAllOfData}
     * @memberof GetListApplicantResponse
     */
    'data'?: GetListApplicantResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListApplicantResponseAllOf
 */
export interface GetListApplicantResponseAllOf {
    /**
     * 
     * @type {GetListApplicantResponseAllOfData}
     * @memberof GetListApplicantResponseAllOf
     */
    'data'?: GetListApplicantResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListApplicantResponseAllOfData
 */
export interface GetListApplicantResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListApplicantResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<Applicant>}
     * @memberof GetListApplicantResponseAllOfData
     */
    'items'?: Array<Applicant>;
}
/**
 * 
 * @export
 * @interface GetListBannerResponse
 */
export interface GetListBannerResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListBannerResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListBannerResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListBannerResponseAllOfData}
     * @memberof GetListBannerResponse
     */
    'data'?: GetListBannerResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListBannerResponseAllOf
 */
export interface GetListBannerResponseAllOf {
    /**
     * 
     * @type {GetListBannerResponseAllOfData}
     * @memberof GetListBannerResponseAllOf
     */
    'data'?: GetListBannerResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListBannerResponseAllOfData
 */
export interface GetListBannerResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListBannerResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<Banners>}
     * @memberof GetListBannerResponseAllOfData
     */
    'items'?: Array<Banners>;
}
/**
 * 
 * @export
 * @interface GetListBaseMasterDataResponse
 */
export interface GetListBaseMasterDataResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListBaseMasterDataResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListBaseMasterDataResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListBaseMasterDataResponseAllOfData}
     * @memberof GetListBaseMasterDataResponse
     */
    'data'?: GetListBaseMasterDataResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListBaseMasterDataResponseAllOf
 */
export interface GetListBaseMasterDataResponseAllOf {
    /**
     * 
     * @type {GetListBaseMasterDataResponseAllOfData}
     * @memberof GetListBaseMasterDataResponseAllOf
     */
    'data'?: GetListBaseMasterDataResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListBaseMasterDataResponseAllOfData
 */
export interface GetListBaseMasterDataResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListBaseMasterDataResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<BaseMasterData>}
     * @memberof GetListBaseMasterDataResponseAllOfData
     */
    'items'?: Array<BaseMasterData>;
}
/**
 * 
 * @export
 * @interface GetListCategoryRequest
 */
export interface GetListCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof GetListCategoryRequest
     */
    'start'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListCategoryRequest
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface GetListCategoryResponse
 */
export interface GetListCategoryResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListCategoryResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListCategoryResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListCategoryResponseAllOfData}
     * @memberof GetListCategoryResponse
     */
    'data'?: GetListCategoryResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListCategoryResponseAllOf
 */
export interface GetListCategoryResponseAllOf {
    /**
     * 
     * @type {GetListCategoryResponseAllOfData}
     * @memberof GetListCategoryResponseAllOf
     */
    'data'?: GetListCategoryResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListCategoryResponseAllOfData
 */
export interface GetListCategoryResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListCategoryResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<Category>}
     * @memberof GetListCategoryResponseAllOfData
     */
    'items'?: Array<Category>;
}
/**
 * 
 * @export
 * @interface GetListMasterDataDefResponse
 */
export interface GetListMasterDataDefResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListMasterDataDefResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListMasterDataDefResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListMasterDataDefResponseAllOfData}
     * @memberof GetListMasterDataDefResponse
     */
    'data'?: GetListMasterDataDefResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListMasterDataDefResponseAllOf
 */
export interface GetListMasterDataDefResponseAllOf {
    /**
     * 
     * @type {GetListMasterDataDefResponseAllOfData}
     * @memberof GetListMasterDataDefResponseAllOf
     */
    'data'?: GetListMasterDataDefResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListMasterDataDefResponseAllOfData
 */
export interface GetListMasterDataDefResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListMasterDataDefResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<MasterDataDef>}
     * @memberof GetListMasterDataDefResponseAllOfData
     */
    'items'?: Array<MasterDataDef>;
}
/**
 * 
 * @export
 * @interface GetListMasterDataRequest
 */
export interface GetListMasterDataRequest {
    /**
     * Tên masterdata
     * @type {string}
     * @memberof GetListMasterDataRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetListMemberRequest
 */
export interface GetListMemberRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListMemberRequest
     */
    'industry'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListMemberRequest
     */
    'desireOccupationalCategory'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetListMemberRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListMemberRequest
     */
    'desireWorkingPlace'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListMemberRequest
     */
    'qualifications'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetListMemberRequest
     */
    'excperienceMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListMemberRequest
     */
    'excperienceMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListMemberRequest
     */
    'start'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetListMemberRequest
     */
    'limit'?: number;
}
/**
 * 
 * @export
 * @interface GetListMemberResponse
 */
export interface GetListMemberResponse {
    /**
     * 
     * @type {GetListMemberResponseData}
     * @memberof GetListMemberResponse
     */
    'data'?: GetListMemberResponseData;
}
/**
 * 
 * @export
 * @interface GetListMemberResponseData
 */
export interface GetListMemberResponseData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListMemberResponseData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<GetListMemberResponseDataItemsInner>}
     * @memberof GetListMemberResponseData
     */
    'items'?: Array<GetListMemberResponseDataItemsInner>;
}
/**
 * 
 * @export
 * @interface GetListMemberResponseDataItemsInner
 */
export interface GetListMemberResponseDataItemsInner {
    /**
     * 
     * @type {number}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'desireWorkingPlace'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'appliedPosition'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'qualifications'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'phone'?: string;
    /**
     * Ngày tạo
     * @type {string}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'createdTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetListMemberResponseDataItemsInner
     */
    'recruitmentsStatus'?: boolean;
}
/**
 * 
 * @export
 * @interface GetListPostResponse
 */
export interface GetListPostResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListPostResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListPostResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListPostResponseAllOfData}
     * @memberof GetListPostResponse
     */
    'data'?: GetListPostResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListPostResponseAllOf
 */
export interface GetListPostResponseAllOf {
    /**
     * 
     * @type {GetListPostResponseAllOfData}
     * @memberof GetListPostResponseAllOf
     */
    'data'?: GetListPostResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListPostResponseAllOfData
 */
export interface GetListPostResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListPostResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<PostList>}
     * @memberof GetListPostResponseAllOfData
     */
    'items'?: Array<PostList>;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentRequest
 */
export interface GetListRecruitmentRequest {
    /**
     * Lấy bản ghi từ trang
     * @type {number}
     * @memberof GetListRecruitmentRequest
     */
    'start'?: number;
    /**
     * Số lượng bản ghi tối đa
     * @type {number}
     * @memberof GetListRecruitmentRequest
     */
    'limit'?: number;
    /**
     * Từ khóa tìm kiếm
     * @type {string}
     * @memberof GetListRecruitmentRequest
     */
    'keywords'?: string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequest
     */
    'industry'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequest
     */
    'departments'?: Array<string>;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequest
     */
    'jobLocations'?: Array<string>;
    /**
     * Danh sách user id
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequest
     */
    'userIds'?: Array<string>;
    /**
     * Ngày đăng từ ngày
     * @type {number}
     * @memberof GetListRecruitmentRequest
     */
    'publishUpDateFrom'?: number;
    /**
     * Ngày đăng đến ngày
     * @type {number}
     * @memberof GetListRecruitmentRequest
     */
    'publishUpDateTo'?: number;
    /**
     * Ngày hết hạn từ ngày
     * @type {number}
     * @memberof GetListRecruitmentRequest
     */
    'expiredDateFrom'?: number;
    /**
     * Ngày hết hạn đến ngày
     * @type {number}
     * @memberof GetListRecruitmentRequest
     */
    'expiredDateTo'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequest
     */
    'states'?: GetListRecruitmentRequestStatesEnum;
    /**
     * Lấy danh sách các thông tin tuyển dụng đã hết hạn/ chưa hết hạn
     * @type {boolean}
     * @memberof GetListRecruitmentRequest
     */
    'isExpired'?: boolean;
}

export const GetListRecruitmentRequestStatesEnum = {
} as const;

export type GetListRecruitmentRequestStatesEnum = typeof GetListRecruitmentRequestStatesEnum[keyof typeof GetListRecruitmentRequestStatesEnum];

/**
 * 
 * @export
 * @interface GetListRecruitmentRequestAllOf
 */
export interface GetListRecruitmentRequestAllOf {
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'industry'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'departments'?: Array<string>;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'jobLocations'?: Array<string>;
    /**
     * Danh sách user id
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'userIds'?: Array<string>;
    /**
     * Ngày đăng từ ngày
     * @type {number}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'publishUpDateFrom'?: number;
    /**
     * Ngày đăng đến ngày
     * @type {number}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'publishUpDateTo'?: number;
    /**
     * Ngày hết hạn từ ngày
     * @type {number}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'expiredDateFrom'?: number;
    /**
     * Ngày hết hạn đến ngày
     * @type {number}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'expiredDateTo'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'states'?: GetListRecruitmentRequestAllOfStatesEnum;
    /**
     * Lấy danh sách các thông tin tuyển dụng đã hết hạn/ chưa hết hạn
     * @type {boolean}
     * @memberof GetListRecruitmentRequestAllOf
     */
    'isExpired'?: boolean;
}

export const GetListRecruitmentRequestAllOfStatesEnum = {
} as const;

export type GetListRecruitmentRequestAllOfStatesEnum = typeof GetListRecruitmentRequestAllOfStatesEnum[keyof typeof GetListRecruitmentRequestAllOfStatesEnum];

/**
 * 
 * @export
 * @interface GetListRecruitmentResponse
 */
export interface GetListRecruitmentResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListRecruitmentResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListRecruitmentResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListRecruitmentResponseAllOfData}
     * @memberof GetListRecruitmentResponse
     */
    'data'?: GetListRecruitmentResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentResponseAllOf
 */
export interface GetListRecruitmentResponseAllOf {
    /**
     * 
     * @type {GetListRecruitmentResponseAllOfData}
     * @memberof GetListRecruitmentResponseAllOf
     */
    'data'?: GetListRecruitmentResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentResponseAllOfData
 */
export interface GetListRecruitmentResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListRecruitmentResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<RecruitmentList>}
     * @memberof GetListRecruitmentResponseAllOfData
     */
    'items'?: Array<RecruitmentList>;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentTemplateRequest
 */
export interface GetListRecruitmentTemplateRequest {
    /**
     * Lấy bản ghi từ trang
     * @type {number}
     * @memberof GetListRecruitmentTemplateRequest
     */
    'start'?: number;
    /**
     * Số lượng bản ghi tối đa
     * @type {number}
     * @memberof GetListRecruitmentTemplateRequest
     */
    'limit'?: number;
    /**
     * Từ khóa tìm kiếm
     * @type {string}
     * @memberof GetListRecruitmentTemplateRequest
     */
    'keywords'?: string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof GetListRecruitmentTemplateRequest
     */
    'industry'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof GetListRecruitmentTemplateRequest
     */
    'departments'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentTemplateRequestAllOf
 */
export interface GetListRecruitmentTemplateRequestAllOf {
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof GetListRecruitmentTemplateRequestAllOf
     */
    'industry'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof GetListRecruitmentTemplateRequestAllOf
     */
    'departments'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentTemplateResponse
 */
export interface GetListRecruitmentTemplateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListRecruitmentTemplateResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListRecruitmentTemplateResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListRecruitmentTemplateResponseAllOfData}
     * @memberof GetListRecruitmentTemplateResponse
     */
    'data'?: GetListRecruitmentTemplateResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentTemplateResponseAllOf
 */
export interface GetListRecruitmentTemplateResponseAllOf {
    /**
     * 
     * @type {GetListRecruitmentTemplateResponseAllOfData}
     * @memberof GetListRecruitmentTemplateResponseAllOf
     */
    'data'?: GetListRecruitmentTemplateResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListRecruitmentTemplateResponseAllOfData
 */
export interface GetListRecruitmentTemplateResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListRecruitmentTemplateResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<RecruitmentTemplateList>}
     * @memberof GetListRecruitmentTemplateResponseAllOfData
     */
    'items'?: Array<RecruitmentTemplateList>;
}
/**
 * 
 * @export
 * @interface GetListUserRequest
 */
export interface GetListUserRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListUserRequest
     */
    'userIds'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetListUserRequest
     */
    'start': number;
    /**
     * 
     * @type {number}
     * @memberof GetListUserRequest
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface GetListUserResponse
 */
export interface GetListUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetListUserResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetListUserResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetListUserResponseAllOfData}
     * @memberof GetListUserResponse
     */
    'data'?: GetListUserResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListUserResponseAllOf
 */
export interface GetListUserResponseAllOf {
    /**
     * 
     * @type {GetListUserResponseAllOfData}
     * @memberof GetListUserResponseAllOf
     */
    'data'?: GetListUserResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetListUserResponseAllOfData
 */
export interface GetListUserResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetListUserResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<UserAdminList>}
     * @memberof GetListUserResponseAllOfData
     */
    'items'?: Array<UserAdminList>;
}
/**
 * 
 * @export
 * @interface GetMediaFilesResponse
 */
export interface GetMediaFilesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetMediaFilesResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetMediaFilesResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetMediaFilesResponseAllOfData}
     * @memberof GetMediaFilesResponse
     */
    'data'?: GetMediaFilesResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetMediaFilesResponseAllOf
 */
export interface GetMediaFilesResponseAllOf {
    /**
     * 
     * @type {GetMediaFilesResponseAllOfData}
     * @memberof GetMediaFilesResponseAllOf
     */
    'data'?: GetMediaFilesResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetMediaFilesResponseAllOfData
 */
export interface GetMediaFilesResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetMediaFilesResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<FileUpload>}
     * @memberof GetMediaFilesResponseAllOfData
     */
    'items'?: Array<FileUpload>;
}
/**
 * 
 * @export
 * @interface GetRecruitmentsResponse
 */
export interface GetRecruitmentsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetRecruitmentsResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof GetRecruitmentsResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {GetRecruitmentsResponseAllOfData}
     * @memberof GetRecruitmentsResponse
     */
    'data'?: GetRecruitmentsResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetRecruitmentsResponseAllOf
 */
export interface GetRecruitmentsResponseAllOf {
    /**
     * 
     * @type {GetRecruitmentsResponseAllOfData}
     * @memberof GetRecruitmentsResponseAllOf
     */
    'data'?: GetRecruitmentsResponseAllOfData;
}
/**
 * 
 * @export
 * @interface GetRecruitmentsResponseAllOfData
 */
export interface GetRecruitmentsResponseAllOfData {
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetRecruitmentsResponseAllOfData
     */
    'total'?: number;
    /**
     * 
     * @type {Array<RecruitmentData>}
     * @memberof GetRecruitmentsResponseAllOfData
     */
    'items'?: Array<RecruitmentData>;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * Tên đăng nhập
     * @type {string}
     * @memberof LoginRequest
     */
    'username'?: string;
    /**
     * Mật khẩu
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponseSuccess
 */
export interface LoginResponseSuccess {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseSuccess
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof LoginResponseSuccess
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {LoginResponseSuccessAllOfData}
     * @memberof LoginResponseSuccess
     */
    'data'?: LoginResponseSuccessAllOfData;
}
/**
 * 
 * @export
 * @interface LoginResponseSuccessAllOf
 */
export interface LoginResponseSuccessAllOf {
    /**
     * 
     * @type {LoginResponseSuccessAllOfData}
     * @memberof LoginResponseSuccessAllOf
     */
    'data'?: LoginResponseSuccessAllOfData;
}
/**
 * 
 * @export
 * @interface LoginResponseSuccessAllOfData
 */
export interface LoginResponseSuccessAllOfData {
    /**
     * token user
     * @type {string}
     * @memberof LoginResponseSuccessAllOfData
     */
    'accessToken'?: string;
    /**
     * userId của người dùng
     * @type {string}
     * @memberof LoginResponseSuccessAllOfData
     */
    'userId'?: string;
    /**
     * Refresh token
     * @type {string}
     * @memberof LoginResponseSuccessAllOfData
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseSuccessAllOfData
     */
    'tokenType'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponseSuccessAllOfData
     */
    'expires'?: number;
}
/**
 * 
 * @export
 * @interface MasterDataDef
 */
export interface MasterDataDef {
    /**
     * Tên mdm
     * @type {string}
     * @memberof MasterDataDef
     */
    'name'?: string;
    /**
     * Mô tả
     * @type {string}
     * @memberof MasterDataDef
     */
    'description'?: string;
    /**
     * Danh sách tên field
     * @type {string}
     * @memberof MasterDataDef
     */
    'fileNameDefine'?: string;
}
/**
 * 
 * @export
 * @interface Members
 */
export interface Members {
    /**
     * id của members
     * @type {number}
     * @memberof Members
     */
    'id'?: number;
    /**
     * Email của user
     * @type {string}
     * @memberof Members
     */
    'email'?: string;
    /**
     * Cả họ và tên của user
     * @type {string}
     * @memberof Members
     */
    'fullName'?: string;
    /**
     * Số điện thoại của user
     * @type {string}
     * @memberof Members
     */
    'phone'?: string;
    /**
     * Giới tính
     * @type {string}
     * @memberof Members
     */
    'gender'?: string;
    /**
     * Địa điểm làm việc quan tâm
     * @type {string}
     * @memberof Members
     */
    'desireWorkingPlace'?: string;
    /**
     * Vị trí ứng tuyển
     * @type {string}
     * @memberof Members
     */
    'appliedPosition'?: string;
    /**
     * Cấp bậc mong muốn
     * @type {string}
     * @memberof Members
     */
    'desireOccupationalCategory'?: string;
    /**
     * Số năm kinh nghiệm
     * @type {number}
     * @memberof Members
     */
    'yearsOfExperience'?: number;
    /**
     * Bằng cấp cao nhất
     * @type {string}
     * @memberof Members
     */
    'qualifications'?: string;
    /**
     * Ngày tạo
     * @type {string}
     * @memberof Members
     */
    'createdTime'?: string;
    /**
     * Ngày thay đổi mật khẩu gần đây nhất
     * @type {string}
     * @memberof Members
     */
    'lastChangeDatePassword'?: string;
    /**
     * Ngày đăng nhập gần đây nhất
     * @type {string}
     * @memberof Members
     */
    'lastLoginDate'?: string;
    /**
     * Ngành nghề
     * @type {string}
     * @memberof Members
     */
    'industry'?: string;
    /**
     * Trạng thái đã ứng tuyển hay chưa
     * @type {boolean}
     * @memberof Members
     */
    'recruitmentsStatus'?: boolean;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'content'?: string;
    /**
     * Trạng thái bài viết: \'DRAFT\',\'ACTIVE\',\'DELETED\',\'INACTIVE\'
     * @type {string}
     * @memberof Post
     */
    'state'?: PostStateEnum;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'modifiedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    'stick'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'stickTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'thumbImage'?: string;
    /**
     * 
     * @type {Array<PostCategoriesInner>}
     * @memberof Post
     */
    'categories'?: Array<PostCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'iconUrl'?: string;
}

export const PostStateEnum = {
    Draft: 'DRAFT',
    Active: 'ACTIVE',
    Deleted: 'DELETED',
    Inactive: 'INACTIVE',
    Published: 'PUBLISHED'
} as const;

export type PostStateEnum = typeof PostStateEnum[keyof typeof PostStateEnum];

/**
 * 
 * @export
 * @interface PostCategoriesInner
 */
export interface PostCategoriesInner {
    /**
     * 
     * @type {number}
     * @memberof PostCategoriesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostCategoriesInner
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface PostDetailPublic
 */
export interface PostDetailPublic {
    /**
     * 
     * @type {number}
     * @memberof PostDetailPublic
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostDetailPublic
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostDetailPublic
     */
    'thumbImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostDetailPublic
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostDetailPublic
     */
    'content'?: string;
    /**
     * 
     * @type {Array<PostCategoriesInner>}
     * @memberof PostDetailPublic
     */
    'categories'?: Array<PostCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof PostDetailPublic
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostDetailPublic
     */
    'stick'?: boolean;
}
/**
 * 
 * @export
 * @interface PostList
 */
export interface PostList {
    /**
     * 
     * @type {number}
     * @memberof PostList
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostList
     */
    'title'?: string;
    /**
     * Trạng thái bài viết: \'DRAFT\',\'ACTIVE\',\'DELETED\'
     * @type {string}
     * @memberof PostList
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostList
     */
    'createdTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostList
     */
    'stick'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PostList
     */
    'stickTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostList
     */
    'thumbImage'?: string;
    /**
     * 
     * @type {Array<PostCategoriesInner>}
     * @memberof PostList
     */
    'categories'?: Array<PostCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof PostList
     */
    'iconUrl'?: string;
}
/**
 * 
 * @export
 * @interface PostRequestBody
 */
export interface PostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'state': string;
    /**
     * 
     * @type {boolean}
     * @memberof PostRequestBody
     */
    'stick'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'thumbImage'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PostRequestBody
     */
    'categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PostRequestBody
     */
    'iconUrl'?: string;
}
/**
 * 
 * @export
 * @interface PostRequestUpdateBody
 */
export interface PostRequestUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'state': string;
    /**
     * 
     * @type {boolean}
     * @memberof PostRequestUpdateBody
     */
    'stick'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'thumbImage'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PostRequestUpdateBody
     */
    'categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PostRequestUpdateBody
     */
    'iconUrl'?: string;
    /**
     * Mã bài viết
     * @type {number}
     * @memberof PostRequestUpdateBody
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PostRequestUpdateBodyAllOf
 */
export interface PostRequestUpdateBodyAllOf {
    /**
     * Mã bài viết
     * @type {number}
     * @memberof PostRequestUpdateBodyAllOf
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface RearrangePositionBannerReponse
 */
export interface RearrangePositionBannerReponse {
    /**
     * 
     * @type {boolean}
     * @memberof RearrangePositionBannerReponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof RearrangePositionBannerReponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {string}
     * @memberof RearrangePositionBannerReponse
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface RearrangePositionBannerReponseAllOf
 */
export interface RearrangePositionBannerReponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof RearrangePositionBannerReponseAllOf
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface RearrangePositionBannerRequest
 */
export interface RearrangePositionBannerRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof RearrangePositionBannerRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface Recruitment
 */
export interface Recruitment {
    /**
     * Mã thông tin tuyển dụng
     * @type {number}
     * @memberof Recruitment
     */
    'id'?: number;
    /**
     * Mã công việc do người quản trị tự nhập
     * @type {string}
     * @memberof Recruitment
     */
    'code'?: string;
    /**
     * Chức danh/ vị trí tuyển dụng
     * @type {string}
     * @memberof Recruitment
     */
    'jobTitle'?: string;
    /**
     * mô tả khác về thông tin tuyển dụng
     * @type {string}
     * @memberof Recruitment
     */
    'description'?: string;
    /**
     * Mô tả về yêu cầu kinh nghiệm công việc
     * @type {string}
     * @memberof Recruitment
     */
    'experienceRequirementDescriptions'?: string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof Recruitment
     */
    'industry'?: Array<string>;
    /**
     * Loại lương: thỏa thuận, gross, net
     * @type {string}
     * @memberof Recruitment
     */
    'salaryType'?: string;
    /**
     * Đơn vị tiền tệ
     * @type {string}
     * @memberof Recruitment
     */
    'salaryCurrency'?: string;
    /**
     * Lương tối thiểu
     * @type {number}
     * @memberof Recruitment
     */
    'salaryMinValue'?: number;
    /**
     * Lương tối đa
     * @type {number}
     * @memberof Recruitment
     */
    'salaryMaxValue'?: number;
    /**
     * Hình thức công việc: chính thức, parttime,...
     * @type {Array<string>}
     * @memberof Recruitment
     */
    'employmentTypes'?: Array<string>;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof Recruitment
     */
    'validThrough'?: string;
    /**
     * Phúc lợi công việc
     * @type {Array<string>}
     * @memberof Recruitment
     */
    'jobBenefits'?: Array<string>;
    /**
     * giới tính
     * @type {string}
     * @memberof Recruitment
     */
    'gender'?: string;
    /**
     * Độ tuổi tối thiểu
     * @type {number}
     * @memberof Recruitment
     */
    'ageFrom'?: number;
    /**
     * Độ tuổi tối đa
     * @type {number}
     * @memberof Recruitment
     */
    'ageTo'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối thiểu
     * @type {number}
     * @memberof Recruitment
     */
    'monthsOfExperienceFrom'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối đa
     * @type {number}
     * @memberof Recruitment
     */
    'monthsOfExperienceTo'?: number;
    /**
     * cấp bậc
     * @type {string}
     * @memberof Recruitment
     */
    'occupationalCategory'?: string;
    /**
     * bằng cấp
     * @type {Array<string>}
     * @memberof Recruitment
     */
    'qualifications'?: Array<string>;
    /**
     * Kỹ năng yêu cầu (người dùng tự nhập)
     * @type {string}
     * @memberof Recruitment
     */
    'skills'?: string;
    /**
     * Số lượng cần tuyển
     * @type {number}
     * @memberof Recruitment
     */
    'jobAmount'?: number;
    /**
     * Ghi chú của người quản trị về thông tin đăng tuyển
     * @type {string}
     * @memberof Recruitment
     */
    'note'?: string;
    /**
     * Lý do đăng tin tuyển dụng
     * @type {string}
     * @memberof Recruitment
     */
    'reasonJobPostings'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof Recruitment
     */
    'jobLocations'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof Recruitment
     */
    'departments'?: Array<string>;
    /**
     * Trạng thái thông tin tuyển dụng
     * @type {string}
     * @memberof Recruitment
     */
    'state'?: RecruitmentStateEnum;
    /**
     * Người tạo thông tin tuyển dụng
     * @type {string}
     * @memberof Recruitment
     */
    'createdBy'?: string;
    /**
     * Người chỉnh sửa thông tin tuyển dụng
     * @type {string}
     * @memberof Recruitment
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Recruitment
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Recruitment
     */
    'modifiedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Recruitment
     */
    'publishUpDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Recruitment
     */
    'publishDownDate'?: string;
    /**
     * Trạng thái tuyển dụng đã hết hạn hay chưa 
     * @type {boolean}
     * @memberof Recruitment
     */
    'isExpired'?: boolean;
    /**
     * Địa chỉ nơi làm việc
     * @type {string}
     * @memberof Recruitment
     */
    'jobAddress'?: string;
    /**
     * Hình thức trả lương
     * @type {string}
     * @memberof Recruitment
     */
    'payroll'?: string;
}

export const RecruitmentStateEnum = {
    Pending: 'PENDING',
    WattingApproved: 'WATTING_APPROVED',
    SendBack: 'SEND_BACK',
    Rejected: 'REJECTED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type RecruitmentStateEnum = typeof RecruitmentStateEnum[keyof typeof RecruitmentStateEnum];

/**
 * 
 * @export
 * @interface RecruitmentData
 */
export interface RecruitmentData {
    /**
     * mã thông tin tuyển dụng tự sinh trên hệ thống
     * @type {number}
     * @memberof RecruitmentData
     */
    'id'?: number;
    /**
     * mã thông tin tuyển dụng do người quản trị nhập
     * @type {string}
     * @memberof RecruitmentData
     */
    'code'?: string;
    /**
     * chức danh
     * @type {string}
     * @memberof RecruitmentData
     */
    'jobTitle'?: string;
}
/**
 * 
 * @export
 * @interface RecruitmentDeleteData
 */
export interface RecruitmentDeleteData {
    /**
     * mã thông tin tuyển dụng tự sinh trên hệ thống
     * @type {number}
     * @memberof RecruitmentDeleteData
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface RecruitmentList
 */
export interface RecruitmentList {
    /**
     * mã thông tin tuyển dụng tự sinh trên hệ thống
     * @type {number}
     * @memberof RecruitmentList
     */
    'id'?: number;
    /**
     * mã thông tin tuyển dụng do người quản trị nhập
     * @type {string}
     * @memberof RecruitmentList
     */
    'code'?: string;
    /**
     * chức danh
     * @type {string}
     * @memberof RecruitmentList
     */
    'jobTitle'?: string;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof RecruitmentList
     */
    'validThrough'?: string;
    /**
     * Trạng thái thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentList
     */
    'state'?: RecruitmentListStateEnum;
    /**
     * Người tạo thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentList
     */
    'createdBy'?: string;
    /**
     * Người chỉnh sửa thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentList
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentList
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentList
     */
    'modifiedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentList
     */
    'publishUpDate'?: string;
    /**
     * Số lượt xem thông tin đăng tuyển
     * @type {number}
     * @memberof RecruitmentList
     */
    'viewCounting'?: number;
    /**
     * Số hồ sơ nộp vào
     * @type {number}
     * @memberof RecruitmentList
     */
    'applicationCounting'?: number;
}

export const RecruitmentListStateEnum = {
    Pending: 'PENDING',
    WattingApproved: 'WATTING_APPROVED',
    SendBack: 'SEND_BACK',
    Rejected: 'REJECTED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type RecruitmentListStateEnum = typeof RecruitmentListStateEnum[keyof typeof RecruitmentListStateEnum];

/**
 * 
 * @export
 * @interface RecruitmentTemplate
 */
export interface RecruitmentTemplate {
    /**
     * Mã mẫu thông tin tuyển dụng
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'id'?: number;
    /**
     * Mã công việc do người quản trị tự nhập
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'code'?: string;
    /**
     * Chức danh/ vị trí tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'jobTitle'?: string;
    /**
     * mô tả khác về thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'description'?: string;
    /**
     * Mô tả về yêu cầu kinh nghiệm công việc
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'experienceRequirementDescriptions'?: string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof RecruitmentTemplate
     */
    'industry'?: Array<string>;
    /**
     * Loại lương: thỏa thuận, gross, net
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'salaryType'?: string;
    /**
     * Đơn vị tiền tệ
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'salaryCurrency'?: string;
    /**
     * Lương tối thiểu
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'salaryMinValue'?: number;
    /**
     * Lương tối đa
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'salaryMaxValue'?: number;
    /**
     * Hình thức công việc: chính thức, parttime,...
     * @type {Array<string>}
     * @memberof RecruitmentTemplate
     */
    'employmentTypes'?: Array<string>;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'validThrough'?: string;
    /**
     * Phúc lợi công việc
     * @type {Array<string>}
     * @memberof RecruitmentTemplate
     */
    'jobBenefits'?: Array<string>;
    /**
     * giới tính
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'gender'?: string;
    /**
     * Độ tuổi tối thiểu
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'ageFrom'?: number;
    /**
     * Độ tuổi tối đa
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'ageTo'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối thiểu
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'monthsOfExperienceFrom'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối đa
     * @type {number}
     * @memberof RecruitmentTemplate
     */
    'monthsOfExperienceTo'?: number;
    /**
     * cấp bậc
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'occupationalCategory'?: string;
    /**
     * bằng cấp
     * @type {Array<string>}
     * @memberof RecruitmentTemplate
     */
    'qualifications'?: Array<string>;
    /**
     * Kỹ năng yêu cầu (người dùng tự nhập)
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'skills'?: string;
    /**
     * Ghi chú của người quản trị về thông tin đăng tuyển
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'note'?: string;
    /**
     * Lý do đăng tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'reasonJobPostings'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof RecruitmentTemplate
     */
    'jobLocations'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof RecruitmentTemplate
     */
    'departments'?: Array<string>;
    /**
     * Địa chỉ nơi làm việc
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'jobAddress'?: string;
    /**
     * Hình thức trả lương
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'payroll'?: string;
    /**
     * Người tạo mẫu thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'createdBy'?: string;
    /**
     * Người chỉnh sửa mẫu thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentTemplate
     */
    'modifiedTime'?: string;
}
/**
 * 
 * @export
 * @interface RecruitmentTemplateData
 */
export interface RecruitmentTemplateData {
    /**
     * mã mẫu thông tin tuyển dụng tự sinh trên hệ thống
     * @type {number}
     * @memberof RecruitmentTemplateData
     */
    'id'?: number;
    /**
     * mã thông tin tuyển dụng do người quản trị nhập
     * @type {string}
     * @memberof RecruitmentTemplateData
     */
    'code'?: string;
    /**
     * chức danh
     * @type {string}
     * @memberof RecruitmentTemplateData
     */
    'jobTitle'?: string;
}
/**
 * 
 * @export
 * @interface RecruitmentTemplateDeleteData
 */
export interface RecruitmentTemplateDeleteData {
    /**
     * mã thông tin tuyển dụng tự sinh trên hệ thống
     * @type {number}
     * @memberof RecruitmentTemplateDeleteData
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface RecruitmentTemplateList
 */
export interface RecruitmentTemplateList {
    /**
     * mã mẫu thông tin tuyển dụng tự sinh trên hệ thống
     * @type {number}
     * @memberof RecruitmentTemplateList
     */
    'id'?: number;
    /**
     * mã thông tin tuyển dụng do người quản trị nhập
     * @type {string}
     * @memberof RecruitmentTemplateList
     */
    'code'?: string;
    /**
     * chức danh
     * @type {string}
     * @memberof RecruitmentTemplateList
     */
    'jobTitle'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof RecruitmentTemplateList
     */
    'jobLocations'?: Array<string>;
    /**
     * Người tạo mẫu thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplateList
     */
    'createdBy'?: string;
    /**
     * Người chỉnh sửa mẫu thông tin tuyển dụng
     * @type {string}
     * @memberof RecruitmentTemplateList
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentTemplateList
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecruitmentTemplateList
     */
    'modifiedTime'?: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * refreshToken
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenResponseSuccess
 */
export interface RefreshTokenResponseSuccess {
    /**
     * 
     * @type {boolean}
     * @memberof RefreshTokenResponseSuccess
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof RefreshTokenResponseSuccess
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {RefreshTokenResponseSuccessAllOfData}
     * @memberof RefreshTokenResponseSuccess
     */
    'data'?: RefreshTokenResponseSuccessAllOfData;
}
/**
 * 
 * @export
 * @interface RefreshTokenResponseSuccessAllOf
 */
export interface RefreshTokenResponseSuccessAllOf {
    /**
     * 
     * @type {RefreshTokenResponseSuccessAllOfData}
     * @memberof RefreshTokenResponseSuccessAllOf
     */
    'data'?: RefreshTokenResponseSuccessAllOfData;
}
/**
 * 
 * @export
 * @interface RefreshTokenResponseSuccessAllOfData
 */
export interface RefreshTokenResponseSuccessAllOfData {
    /**
     * token user
     * @type {string}
     * @memberof RefreshTokenResponseSuccessAllOfData
     */
    'accessToken'?: string;
    /**
     * userId của người dùng
     * @type {string}
     * @memberof RefreshTokenResponseSuccessAllOfData
     */
    'userId'?: string;
    /**
     * Refresh token
     * @type {string}
     * @memberof RefreshTokenResponseSuccessAllOfData
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenResponseSuccessAllOfData
     */
    'tokenType'?: string;
}
/**
 * 
 * @export
 * @interface RegisterMemberRequest
 */
export interface RegisterMemberRequest {
    /**
     * Email của user
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'email'?: string;
    /**
     * Cả họ và tên của user
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'fullName'?: string;
    /**
     * Số điện thoại của user
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'phone'?: string;
    /**
     * Giới tính
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'gender'?: string;
    /**
     * Địa điểm làm việc quan tâm
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'desireWorkingPlace'?: string;
    /**
     * Vị trí ứng tuyển
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'appliedPosition'?: string;
    /**
     * Cấp bậc mong muốn
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'desireOccupationalCategory'?: string;
    /**
     * Số năm kinh nghiệm
     * @type {number}
     * @memberof RegisterMemberRequest
     */
    'yearsOfExperience'?: number;
    /**
     * Bằng cấp cao nhất
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'qualifications'?: string;
    /**
     * Ngành nghề
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'industry'?: string;
}
/**
 * 
 * @export
 * @interface RequestDeleteBody
 */
export interface RequestDeleteBody {
    /**
     * 
     * @type {Array<number>}
     * @memberof RequestDeleteBody
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateBannerRequest
 */
export interface UpdateBannerRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateBannerRequest
     */
    'id'?: number;
    /**
     * Tên banner
     * @type {string}
     * @memberof UpdateBannerRequest
     */
    'name'?: string;
    /**
     * Đường dẫn ảnh banner
     * @type {string}
     * @memberof UpdateBannerRequest
     */
    'fileUrl'?: string;
    /**
     * Đường dẫn bài viết khi click vào banner image
     * @type {string}
     * @memberof UpdateBannerRequest
     */
    'targetUrl'?: string;
    /**
     * Đường dẫn bài viết khi click vào banner image
     * @type {string}
     * @memberof UpdateBannerRequest
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateBannerRequest
     */
    'publicBanner'?: boolean;
    /**
     * Định dạng banner
     * @type {string}
     * @memberof UpdateBannerRequest
     */
    'mimeType'?: string;
    /**
     * Thời gian hiển thị banner
     * @type {number}
     * @memberof UpdateBannerRequest
     */
    'duration'?: number;
    /**
     * Nội dung banner
     * @type {string}
     * @memberof UpdateBannerRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface UpdateBannerResponse
 */
export interface UpdateBannerResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateBannerResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof UpdateBannerResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {Banners}
     * @memberof UpdateBannerResponse
     */
    'data'?: Banners;
}
/**
 * 
 * @export
 * @interface UpdateRecruitmentRequest
 */
export interface UpdateRecruitmentRequest {
    /**
     * Mã công việc do người quản trị tự nhập
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'code': string;
    /**
     * Chức danh/ vị trí tuyển dụng
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'jobTitle': string;
    /**
     * mô tả khác về công việc
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'description': string;
    /**
     * Mô tả về yêu cầu kinh nghiệm công việc
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'experienceRequirementDescriptions': string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof UpdateRecruitmentRequest
     */
    'industry': Array<string>;
    /**
     * Loại lương: thỏa thuận, gross, net
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'salaryType'?: string;
    /**
     * Đơn vị tiền tệ
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'salaryCurrency'?: string;
    /**
     * Lương tối thiểu
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'salaryMinValue'?: number;
    /**
     * Lương tối đa
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'salaryMaxValue'?: number;
    /**
     * Hình thức công việc: chính thức, parttime,...
     * @type {Array<string>}
     * @memberof UpdateRecruitmentRequest
     */
    'employmentTypes': Array<string>;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'validThrough': string;
    /**
     * Phúc lợi công việc
     * @type {Array<string>}
     * @memberof UpdateRecruitmentRequest
     */
    'jobBenefits': Array<string>;
    /**
     * giới tính
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'gender': string;
    /**
     * Độ tuổi tối thiểu
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'ageFrom'?: number;
    /**
     * Độ tuổi tối đa
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'ageTo'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối thiểu
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'monthsOfExperienceFrom'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối đa
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'monthsOfExperienceTo'?: number;
    /**
     * Loại kinh nghiệm yêu cầu: lâu năm, mới,...
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'experienceRequirementsType'?: string;
    /**
     * cấp bậc
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'occupationalCategory': string;
    /**
     * bằng cấp
     * @type {Array<string>}
     * @memberof UpdateRecruitmentRequest
     */
    'qualifications': Array<string>;
    /**
     * Kỹ năng yêu cầu (người dùng tự nhập)
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'skills'?: string;
    /**
     * Ghi chú của người quản trị về thông tin đăng tuyển
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'note'?: string;
    /**
     * Lý do đăng tin tuyển dụng
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'reasonJobPostings'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof UpdateRecruitmentRequest
     */
    'jobLocations'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof UpdateRecruitmentRequest
     */
    'departments'?: Array<string>;
    /**
     * Địa chỉ nơi làm việc
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'jobAddress'?: string;
    /**
     * Hình thức trả lương
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'payroll'?: string;
    /**
     * Số lượng cần tuyển
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'jobAmount': number;
    /**
     * Trạng thái thông tin tuyển dụng
     * @type {string}
     * @memberof UpdateRecruitmentRequest
     */
    'state'?: UpdateRecruitmentRequestStateEnum;
    /**
     * Mã thông tin tuyển dụng
     * @type {number}
     * @memberof UpdateRecruitmentRequest
     */
    'id': number;
}

export const UpdateRecruitmentRequestStateEnum = {
    Pending: 'PENDING',
    WattingApproved: 'WATTING_APPROVED',
    SendBack: 'SEND_BACK',
    Rejected: 'REJECTED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type UpdateRecruitmentRequestStateEnum = typeof UpdateRecruitmentRequestStateEnum[keyof typeof UpdateRecruitmentRequestStateEnum];

/**
 * 
 * @export
 * @interface UpdateRecruitmentRequestAllOf
 */
export interface UpdateRecruitmentRequestAllOf {
    /**
     * Mã thông tin tuyển dụng
     * @type {number}
     * @memberof UpdateRecruitmentRequestAllOf
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface UpdateRecruitmentResponse
 */
export interface UpdateRecruitmentResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRecruitmentResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof UpdateRecruitmentResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {RecruitmentData}
     * @memberof UpdateRecruitmentResponse
     */
    'data'?: RecruitmentData;
}
/**
 * 
 * @export
 * @interface UpdateRecruitmentTemplateRequest
 */
export interface UpdateRecruitmentTemplateRequest {
    /**
     * Mã công việc do người quản trị tự nhập
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'code': string;
    /**
     * Chức danh/ vị trí tuyển dụng
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'jobTitle': string;
    /**
     * mô tả khác về công việc
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'description': string;
    /**
     * Mô tả về yêu cầu kinh nghiệm công việc
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'experienceRequirementDescriptions': string;
    /**
     * Ngành nghề
     * @type {Array<string>}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'industry': Array<string>;
    /**
     * Loại lương: thỏa thuận, gross, net
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'salaryType'?: string;
    /**
     * Đơn vị tiền tệ
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'salaryCurrency'?: string;
    /**
     * Lương tối thiểu
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'salaryMinValue'?: number;
    /**
     * Lương tối đa
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'salaryMaxValue'?: number;
    /**
     * Hình thức công việc: chính thức, parttime,...
     * @type {Array<string>}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'employmentTypes': Array<string>;
    /**
     * Hạn nộp hồ sơ
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'validThrough': string;
    /**
     * Phúc lợi công việc
     * @type {Array<string>}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'jobBenefits': Array<string>;
    /**
     * giới tính
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'gender': string;
    /**
     * Độ tuổi tối thiểu
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'ageFrom'?: number;
    /**
     * Độ tuổi tối đa
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'ageTo'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối thiểu
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'monthsOfExperienceFrom'?: number;
    /**
     * số tháng yêu cầu kinh nghiệm tối đa
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'monthsOfExperienceTo'?: number;
    /**
     * Loại kinh nghiệm yêu cầu: lâu năm, mới,...
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'experienceRequirementsType'?: string;
    /**
     * cấp bậc
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'occupationalCategory': string;
    /**
     * bằng cấp
     * @type {Array<string>}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'qualifications': Array<string>;
    /**
     * Kỹ năng yêu cầu (người dùng tự nhập)
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'skills'?: string;
    /**
     * Ghi chú của người quản trị về thông tin đăng tuyển
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'note'?: string;
    /**
     * Lý do đăng tin tuyển dụng
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'reasonJobPostings'?: string;
    /**
     * Danh sách nơi làm việc
     * @type {Array<string>}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'jobLocations'?: Array<string>;
    /**
     * Phòng ban
     * @type {Array<string>}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'departments'?: Array<string>;
    /**
     * Địa chỉ nơi làm việc
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'jobAddress'?: string;
    /**
     * Hình thức trả lương
     * @type {string}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'payroll'?: string;
    /**
     * Mã mẫu thông tin tuyển dụng
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequest
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface UpdateRecruitmentTemplateRequestAllOf
 */
export interface UpdateRecruitmentTemplateRequestAllOf {
    /**
     * Mã mẫu thông tin tuyển dụng
     * @type {number}
     * @memberof UpdateRecruitmentTemplateRequestAllOf
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface UpdateRecruitmentTemplateResponse
 */
export interface UpdateRecruitmentTemplateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRecruitmentTemplateResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof UpdateRecruitmentTemplateResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {RecruitmentTemplateData}
     * @memberof UpdateRecruitmentTemplateResponse
     */
    'data'?: RecruitmentTemplateData;
}
/**
 * 
 * @export
 * @interface UpdateStateRecruitmentRequest
 */
export interface UpdateStateRecruitmentRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateStateRecruitmentRequest
     */
    'ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof UpdateStateRecruitmentRequest
     */
    'state'?: UpdateStateRecruitmentRequestStateEnum;
}

export const UpdateStateRecruitmentRequestStateEnum = {
    Pending: 'PENDING',
    WattingApproved: 'WATTING_APPROVED',
    SendBack: 'SEND_BACK',
    Rejected: 'REJECTED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type UpdateStateRecruitmentRequestStateEnum = typeof UpdateStateRecruitmentRequestStateEnum[keyof typeof UpdateStateRecruitmentRequestStateEnum];

/**
 * 
 * @export
 * @interface UpdateStateRecruitmentResponse
 */
export interface UpdateStateRecruitmentResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateStateRecruitmentResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof UpdateStateRecruitmentResponse
     */
    'error'?: BaseDataItemResponseFailedError;
}
/**
 * 
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UploadFileResponse
     */
    'success': boolean;
    /**
     * 
     * @type {BaseDataItemResponseFailedError}
     * @memberof UploadFileResponse
     */
    'error'?: BaseDataItemResponseFailedError;
    /**
     * 
     * @type {UploadFileResponseAllOfData}
     * @memberof UploadFileResponse
     */
    'data'?: UploadFileResponseAllOfData;
}
/**
 * 
 * @export
 * @interface UploadFileResponseAllOf
 */
export interface UploadFileResponseAllOf {
    /**
     * 
     * @type {UploadFileResponseAllOfData}
     * @memberof UploadFileResponseAllOf
     */
    'data'?: UploadFileResponseAllOfData;
}
/**
 * 
 * @export
 * @interface UploadFileResponseAllOfData
 */
export interface UploadFileResponseAllOfData {
    /**
     * tên file upload
     * @type {string}
     * @memberof UploadFileResponseAllOfData
     */
    'fileName'?: string;
    /**
     * url file
     * @type {string}
     * @memberof UploadFileResponseAllOfData
     */
    'url'?: string;
    /**
     * Id file
     * @type {number}
     * @memberof UploadFileResponseAllOfData
     */
    'id'?: number;
    /**
     * url ảnh thumb của file
     * @type {string}
     * @memberof UploadFileResponseAllOfData
     */
    'iconUrl'?: string;
}
/**
 * 
 * @export
 * @interface UserAdminList
 */
export interface UserAdminList {
    /**
     * 
     * @type {string}
     * @memberof UserAdminList
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAdminList
     */
    'userName'?: string;
}

/**
 * ApplicantsApi - axios parameter creator
 * @export
 */
export const ApplicantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Tạo thông tin hồ sơ ứng tuyển
         * @param {ApplicantRequestBody} applicantRequestBody Tạo thông tin hồ sơ ứng tuyển
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1ApplicantsPost: async (applicantRequestBody: ApplicantRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantRequestBody' is not null or undefined
            assertParamExists('adminCmsServiceV1ApplicantsPost', 'applicantRequestBody', applicantRequestBody)
            const localVarPath = `/admin/cms-service/v1/applicants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicantRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Xóa thông tin hồ sơ ứng tuyển theo id
         * @summary Xóa thông tin hồ sơ ứng tuyển
         * @param {number} [applicantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicant: async (applicantId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/applicants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin hồ sơ ứng tuyển theo id
         * @summary Lấy thông tin chi tiết thông tin hồ sơ ứng tuyển
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailApplicant: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetailApplicant', 'id', id)
            const localVarPath = `/admin/cms-service/v1/applicants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách hồ sơ ứng tuyển
         * @param {GetListApplicantRequest} [getListApplicantRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListApplicant: async (getListApplicantRequest?: GetListApplicantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/applicants/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListApplicantRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicantsApi - functional programming interface
 * @export
 */
export const ApplicantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Tạo thông tin hồ sơ ứng tuyển
         * @param {ApplicantRequestBody} applicantRequestBody Tạo thông tin hồ sơ ứng tuyển
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCmsServiceV1ApplicantsPost(applicantRequestBody: ApplicantRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCmsServiceV1ApplicantsPost(applicantRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Xóa thông tin hồ sơ ứng tuyển theo id
         * @summary Xóa thông tin hồ sơ ứng tuyển
         * @param {number} [applicantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicant(applicantId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplicant(applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin hồ sơ ứng tuyển theo id
         * @summary Lấy thông tin chi tiết thông tin hồ sơ ứng tuyển
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailApplicant(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailApplicantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailApplicant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách hồ sơ ứng tuyển
         * @param {GetListApplicantRequest} [getListApplicantRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListApplicant(getListApplicantRequest?: GetListApplicantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListApplicantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListApplicant(getListApplicantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicantsApi - factory interface
 * @export
 */
export const ApplicantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Tạo thông tin hồ sơ ứng tuyển
         * @param {ApplicantRequestBody} applicantRequestBody Tạo thông tin hồ sơ ứng tuyển
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1ApplicantsPost(applicantRequestBody: ApplicantRequestBody, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.adminCmsServiceV1ApplicantsPost(applicantRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Xóa thông tin hồ sơ ứng tuyển theo id
         * @summary Xóa thông tin hồ sơ ứng tuyển
         * @param {number} [applicantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicant(applicantId?: number, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.deleteApplicant(applicantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin hồ sơ ứng tuyển theo id
         * @summary Lấy thông tin chi tiết thông tin hồ sơ ứng tuyển
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailApplicant(id: number, options?: any): AxiosPromise<GetDetailApplicantResponse> {
            return localVarFp.getDetailApplicant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách hồ sơ ứng tuyển
         * @param {GetListApplicantRequest} [getListApplicantRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListApplicant(getListApplicantRequest?: GetListApplicantRequest, options?: any): AxiosPromise<GetListApplicantResponse> {
            return localVarFp.getListApplicant(getListApplicantRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicantsApi - object-oriented interface
 * @export
 * @class ApplicantsApi
 * @extends {BaseAPI}
 */
export class ApplicantsApi extends BaseAPI {
    /**
     * 
     * @summary Tạo thông tin hồ sơ ứng tuyển
     * @param {ApplicantRequestBody} applicantRequestBody Tạo thông tin hồ sơ ứng tuyển
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public adminCmsServiceV1ApplicantsPost(applicantRequestBody: ApplicantRequestBody, options?: AxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).adminCmsServiceV1ApplicantsPost(applicantRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Xóa thông tin hồ sơ ứng tuyển theo id
     * @summary Xóa thông tin hồ sơ ứng tuyển
     * @param {number} [applicantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public deleteApplicant(applicantId?: number, options?: AxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).deleteApplicant(applicantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin hồ sơ ứng tuyển theo id
     * @summary Lấy thông tin chi tiết thông tin hồ sơ ứng tuyển
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public getDetailApplicant(id: number, options?: AxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).getDetailApplicant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách hồ sơ ứng tuyển
     * @param {GetListApplicantRequest} [getListApplicantRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public getListApplicant(getListApplicantRequest?: GetListApplicantRequest, options?: AxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).getListApplicant(getListApplicantRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary đăng nhập hệ thống
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/auth-service/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary nếu thực hiện các api response error code = 6 thì dùng api này để lấy access token mới
         * @param {RefreshTokenRequest} [refreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshTokenRequest?: RefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/auth-service/v1/refreshtoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary đăng nhập hệ thống
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary nếu thực hiện các api response error code = 6 thì dùng api này để lấy access token mới
         * @param {RefreshTokenRequest} [refreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshTokenRequest?: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary đăng nhập hệ thống
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponseSuccess> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary nếu thực hiện các api response error code = 6 thì dùng api này để lấy access token mới
         * @param {RefreshTokenRequest} [refreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshTokenRequest?: RefreshTokenRequest, options?: any): AxiosPromise<RefreshTokenResponseSuccess> {
            return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary đăng nhập hệ thống
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginRequest?: LoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary nếu thực hiện các api response error code = 6 thì dùng api này để lấy access token mới
     * @param {RefreshTokenRequest} [refreshTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(refreshTokenRequest?: RefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BannersApi - axios parameter creator
 * @export
 */
export const BannersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Tạo mới banner
         * @param {CreateBannerRequest} createBannerRequest Thông tin của banner cần được tạo mới
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBanner: async (createBannerRequest: CreateBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBannerRequest' is not null or undefined
            assertParamExists('createBanner', 'createBannerRequest', createBannerRequest)
            const localVarPath = `/admin/cms-service/v1/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBannerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Xóa một hoặc nhiều banner
         * @param {DeleteBannerRequest} deleteBannerRequest Danh sách Id banner cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBanner: async (deleteBannerRequest: DeleteBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteBannerRequest' is not null or undefined
            assertParamExists('deleteBanner', 'deleteBannerRequest', deleteBannerRequest)
            const localVarPath = `/admin/cms-service/v1/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBannerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin chi tiết banner
         * @summary Lấy thông tin chi tiết của banner
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBannerById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBannerById', 'id', id)
            const localVarPath = `/admin/cms-service/v1/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách banner
         * @param {boolean} [_public] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListBanner: async (_public?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (_public !== undefined) {
                localVarQueryParameter['public'] = _public;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách banner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListBanner_1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/cms-service/v1/getListBannerPublic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sắp xếp lại vị trí banner
         * @param {RearrangePositionBannerRequest} rearrangePositionBannerRequest Danh sách banner sau khi sắp xếp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rearrangePositionBanners: async (rearrangePositionBannerRequest: RearrangePositionBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rearrangePositionBannerRequest' is not null or undefined
            assertParamExists('rearrangePositionBanners', 'rearrangePositionBannerRequest', rearrangePositionBannerRequest)
            const localVarPath = `/admin/cms-service/v1/banners/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rearrangePositionBannerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cập nhật thông tin banner
         * @summary Cập nhật thông tin banner
         * @param {UpdateBannerRequest} updateBannerRequest Danh sách Id banner cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBanner: async (updateBannerRequest: UpdateBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateBannerRequest' is not null or undefined
            assertParamExists('updateBanner', 'updateBannerRequest', updateBannerRequest)
            const localVarPath = `/admin/cms-service/v1/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBannerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BannersApi - functional programming interface
 * @export
 */
export const BannersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BannersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Tạo mới banner
         * @param {CreateBannerRequest} createBannerRequest Thông tin của banner cần được tạo mới
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBanner(createBannerRequest: CreateBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBannerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBanner(createBannerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Xóa một hoặc nhiều banner
         * @param {DeleteBannerRequest} deleteBannerRequest Danh sách Id banner cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBanner(deleteBannerRequest: DeleteBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBannerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBanner(deleteBannerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin chi tiết banner
         * @summary Lấy thông tin chi tiết của banner
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBannerById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBannerByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBannerById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách banner
         * @param {boolean} [_public] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListBanner(_public?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListBannerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListBanner(_public, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách banner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListBanner_1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListBannerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListBanner_1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sắp xếp lại vị trí banner
         * @param {RearrangePositionBannerRequest} rearrangePositionBannerRequest Danh sách banner sau khi sắp xếp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rearrangePositionBanners(rearrangePositionBannerRequest: RearrangePositionBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RearrangePositionBannerReponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rearrangePositionBanners(rearrangePositionBannerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cập nhật thông tin banner
         * @summary Cập nhật thông tin banner
         * @param {UpdateBannerRequest} updateBannerRequest Danh sách Id banner cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBanner(updateBannerRequest: UpdateBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBannerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBanner(updateBannerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BannersApi - factory interface
 * @export
 */
export const BannersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BannersApiFp(configuration)
    return {
        /**
         * 
         * @summary Tạo mới banner
         * @param {CreateBannerRequest} createBannerRequest Thông tin của banner cần được tạo mới
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBanner(createBannerRequest: CreateBannerRequest, options?: any): AxiosPromise<CreateBannerResponse> {
            return localVarFp.createBanner(createBannerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Xóa một hoặc nhiều banner
         * @param {DeleteBannerRequest} deleteBannerRequest Danh sách Id banner cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBanner(deleteBannerRequest: DeleteBannerRequest, options?: any): AxiosPromise<DeleteBannerResponse> {
            return localVarFp.deleteBanner(deleteBannerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin chi tiết banner
         * @summary Lấy thông tin chi tiết của banner
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBannerById(id: number, options?: any): AxiosPromise<GetBannerByIdResponse> {
            return localVarFp.getBannerById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách banner
         * @param {boolean} [_public] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListBanner(_public?: boolean, options?: any): AxiosPromise<GetListBannerResponse> {
            return localVarFp.getListBanner(_public, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách banner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListBanner_1(options?: any): AxiosPromise<GetListBannerResponse> {
            return localVarFp.getListBanner_1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sắp xếp lại vị trí banner
         * @param {RearrangePositionBannerRequest} rearrangePositionBannerRequest Danh sách banner sau khi sắp xếp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rearrangePositionBanners(rearrangePositionBannerRequest: RearrangePositionBannerRequest, options?: any): AxiosPromise<RearrangePositionBannerReponse> {
            return localVarFp.rearrangePositionBanners(rearrangePositionBannerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cập nhật thông tin banner
         * @summary Cập nhật thông tin banner
         * @param {UpdateBannerRequest} updateBannerRequest Danh sách Id banner cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBanner(updateBannerRequest: UpdateBannerRequest, options?: any): AxiosPromise<UpdateBannerResponse> {
            return localVarFp.updateBanner(updateBannerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BannersApi - object-oriented interface
 * @export
 * @class BannersApi
 * @extends {BaseAPI}
 */
export class BannersApi extends BaseAPI {
    /**
     * 
     * @summary Tạo mới banner
     * @param {CreateBannerRequest} createBannerRequest Thông tin của banner cần được tạo mới
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public createBanner(createBannerRequest: CreateBannerRequest, options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).createBanner(createBannerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Xóa một hoặc nhiều banner
     * @param {DeleteBannerRequest} deleteBannerRequest Danh sách Id banner cần xóa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public deleteBanner(deleteBannerRequest: DeleteBannerRequest, options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).deleteBanner(deleteBannerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin chi tiết banner
     * @summary Lấy thông tin chi tiết của banner
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public getBannerById(id: number, options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).getBannerById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách banner
     * @param {boolean} [_public] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public getListBanner(_public?: boolean, options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).getListBanner(_public, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách banner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public getListBanner_1(options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).getListBanner_1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sắp xếp lại vị trí banner
     * @param {RearrangePositionBannerRequest} rearrangePositionBannerRequest Danh sách banner sau khi sắp xếp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public rearrangePositionBanners(rearrangePositionBannerRequest: RearrangePositionBannerRequest, options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).rearrangePositionBanners(rearrangePositionBannerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cập nhật thông tin banner
     * @summary Cập nhật thông tin banner
     * @param {UpdateBannerRequest} updateBannerRequest Danh sách Id banner cần xóa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    public updateBanner(updateBannerRequest: UpdateBannerRequest, options?: AxiosRequestConfig) {
        return BannersApiFp(this.configuration).updateBanner(updateBannerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lấy danh sách danh mục
         * @param {GetListCategoryRequest} [getListCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1CategoriesGetListPost: async (getListCategoryRequest?: GetListCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/categories/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tạo danh mục bài viết
         * @param {CategoryRequestBody} categoryRequestBody Tạo danh mục bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1CategoriesPost: async (categoryRequestBody: CategoryRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryRequestBody' is not null or undefined
            assertParamExists('adminCmsServiceV1CategoriesPost', 'categoryRequestBody', categoryRequestBody)
            const localVarPath = `/admin/cms-service/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cập nhật danh mục bài viết
         * @param {CategoryRequestUpdateBody} categoryRequestUpdateBody Cập nhật danh mục bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1CategoriesPut: async (categoryRequestUpdateBody: CategoryRequestUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryRequestUpdateBody' is not null or undefined
            assertParamExists('adminCmsServiceV1CategoriesPut', 'categoryRequestUpdateBody', categoryRequestUpdateBody)
            const localVarPath = `/admin/cms-service/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequestUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Xóa danh mục bài viết theo id
         * @summary Xóa danh mục bài viết
         * @param {DeleteCategoryRequest} deleteCategoryRequest Danh sách Id cần Xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (deleteCategoryRequest: DeleteCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCategoryRequest' is not null or undefined
            assertParamExists('deleteCategory', 'deleteCategoryRequest', deleteCategoryRequest)
            const localVarPath = `/admin/cms-service/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin danh mục bài viết theo id
         * @summary Lấy thông tin chi tiết 1 danh mục bài viết
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailCategory: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetailCategory', 'id', id)
            const localVarPath = `/admin/cms-service/v1/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Lấy danh sách danh mục
         * @param {GetListCategoryRequest} [getListCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCmsServiceV1CategoriesGetListPost(getListCategoryRequest?: GetListCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCmsServiceV1CategoriesGetListPost(getListCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tạo danh mục bài viết
         * @param {CategoryRequestBody} categoryRequestBody Tạo danh mục bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCmsServiceV1CategoriesPost(categoryRequestBody: CategoryRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCmsServiceV1CategoriesPost(categoryRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cập nhật danh mục bài viết
         * @param {CategoryRequestUpdateBody} categoryRequestUpdateBody Cập nhật danh mục bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCmsServiceV1CategoriesPut(categoryRequestUpdateBody: CategoryRequestUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCmsServiceV1CategoriesPut(categoryRequestUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Xóa danh mục bài viết theo id
         * @summary Xóa danh mục bài viết
         * @param {DeleteCategoryRequest} deleteCategoryRequest Danh sách Id cần Xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(deleteCategoryRequest: DeleteCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(deleteCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin danh mục bài viết theo id
         * @summary Lấy thông tin chi tiết 1 danh mục bài viết
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailCategory(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Lấy danh sách danh mục
         * @param {GetListCategoryRequest} [getListCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1CategoriesGetListPost(getListCategoryRequest?: GetListCategoryRequest, options?: any): AxiosPromise<GetListCategoryResponse> {
            return localVarFp.adminCmsServiceV1CategoriesGetListPost(getListCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tạo danh mục bài viết
         * @param {CategoryRequestBody} categoryRequestBody Tạo danh mục bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1CategoriesPost(categoryRequestBody: CategoryRequestBody, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.adminCmsServiceV1CategoriesPost(categoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cập nhật danh mục bài viết
         * @param {CategoryRequestUpdateBody} categoryRequestUpdateBody Cập nhật danh mục bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCmsServiceV1CategoriesPut(categoryRequestUpdateBody: CategoryRequestUpdateBody, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.adminCmsServiceV1CategoriesPut(categoryRequestUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Xóa danh mục bài viết theo id
         * @summary Xóa danh mục bài viết
         * @param {DeleteCategoryRequest} deleteCategoryRequest Danh sách Id cần Xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(deleteCategoryRequest: DeleteCategoryRequest, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.deleteCategory(deleteCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin danh mục bài viết theo id
         * @summary Lấy thông tin chi tiết 1 danh mục bài viết
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailCategory(id: number, options?: any): AxiosPromise<GetDetailCategoryResponse> {
            return localVarFp.getDetailCategory(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * 
     * @summary Lấy danh sách danh mục
     * @param {GetListCategoryRequest} [getListCategoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public adminCmsServiceV1CategoriesGetListPost(getListCategoryRequest?: GetListCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).adminCmsServiceV1CategoriesGetListPost(getListCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tạo danh mục bài viết
     * @param {CategoryRequestBody} categoryRequestBody Tạo danh mục bài viết
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public adminCmsServiceV1CategoriesPost(categoryRequestBody: CategoryRequestBody, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).adminCmsServiceV1CategoriesPost(categoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cập nhật danh mục bài viết
     * @param {CategoryRequestUpdateBody} categoryRequestUpdateBody Cập nhật danh mục bài viết
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public adminCmsServiceV1CategoriesPut(categoryRequestUpdateBody: CategoryRequestUpdateBody, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).adminCmsServiceV1CategoriesPut(categoryRequestUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Xóa danh mục bài viết theo id
     * @summary Xóa danh mục bài viết
     * @param {DeleteCategoryRequest} deleteCategoryRequest Danh sách Id cần Xóa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public deleteCategory(deleteCategoryRequest: DeleteCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).deleteCategory(deleteCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin danh mục bài viết theo id
     * @summary Lấy thông tin chi tiết 1 danh mục bài viết
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getDetailCategory(id: number, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getDetailCategory(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MasterdataApi - axios parameter creator
 * @export
 */
export const MasterdataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lấy danh sách các bảng mdm trên hệ thống
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCareerServiceV1MasterdataDefinitionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/career-service/v1/masterdata/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách MDM
         * @param {GetListMasterDataRequest} getListMasterDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCareerServiceV1MasterdataGetListPost: async (getListMasterDataRequest: GetListMasterDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getListMasterDataRequest' is not null or undefined
            assertParamExists('adminCareerServiceV1MasterdataGetListPost', 'getListMasterDataRequest', getListMasterDataRequest)
            const localVarPath = `/admin/career-service/v1/masterdata/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListMasterDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterdataApi - functional programming interface
 * @export
 */
export const MasterdataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MasterdataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Lấy danh sách các bảng mdm trên hệ thống
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCareerServiceV1MasterdataDefinitionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListMasterDataDefResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCareerServiceV1MasterdataDefinitionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách MDM
         * @param {GetListMasterDataRequest} getListMasterDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCareerServiceV1MasterdataGetListPost(getListMasterDataRequest: GetListMasterDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListBaseMasterDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCareerServiceV1MasterdataGetListPost(getListMasterDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MasterdataApi - factory interface
 * @export
 */
export const MasterdataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MasterdataApiFp(configuration)
    return {
        /**
         * 
         * @summary Lấy danh sách các bảng mdm trên hệ thống
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCareerServiceV1MasterdataDefinitionsGet(options?: any): AxiosPromise<GetListMasterDataDefResponse> {
            return localVarFp.adminCareerServiceV1MasterdataDefinitionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách MDM
         * @param {GetListMasterDataRequest} getListMasterDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCareerServiceV1MasterdataGetListPost(getListMasterDataRequest: GetListMasterDataRequest, options?: any): AxiosPromise<GetListBaseMasterDataResponse> {
            return localVarFp.adminCareerServiceV1MasterdataGetListPost(getListMasterDataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MasterdataApi - object-oriented interface
 * @export
 * @class MasterdataApi
 * @extends {BaseAPI}
 */
export class MasterdataApi extends BaseAPI {
    /**
     * 
     * @summary Lấy danh sách các bảng mdm trên hệ thống
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterdataApi
     */
    public adminCareerServiceV1MasterdataDefinitionsGet(options?: AxiosRequestConfig) {
        return MasterdataApiFp(this.configuration).adminCareerServiceV1MasterdataDefinitionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách MDM
     * @param {GetListMasterDataRequest} getListMasterDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterdataApi
     */
    public adminCareerServiceV1MasterdataGetListPost(getListMasterDataRequest: GetListMasterDataRequest, options?: AxiosRequestConfig) {
        return MasterdataApiFp(this.configuration).adminCareerServiceV1MasterdataGetListPost(getListMasterDataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaFilesApi - axios parameter creator
 * @export
 */
export const MediaFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Xóa các file media đã upload
         * @param {DeleteMediaFileRequest} deleteMediaFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFiles: async (deleteMediaFileRequest: DeleteMediaFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteMediaFileRequest' is not null or undefined
            assertParamExists('deleteMediaFiles', 'deleteMediaFileRequest', deleteMediaFileRequest)
            const localVarPath = `/admin/upload-service/v1/media-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMediaFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách các file đã upload
         * @param {number} [start] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFiles: async (start?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/upload-service/v1/media-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaFilesApi - functional programming interface
 * @export
 */
export const MediaFilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaFilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Xóa các file media đã upload
         * @param {DeleteMediaFileRequest} deleteMediaFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMediaFiles(deleteMediaFileRequest: DeleteMediaFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMediaFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMediaFiles(deleteMediaFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách các file đã upload
         * @param {number} [start] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaFiles(start?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMediaFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaFiles(start, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaFilesApi - factory interface
 * @export
 */
export const MediaFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaFilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Xóa các file media đã upload
         * @param {DeleteMediaFileRequest} deleteMediaFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFiles(deleteMediaFileRequest: DeleteMediaFileRequest, options?: any): AxiosPromise<DeleteMediaFileResponse> {
            return localVarFp.deleteMediaFiles(deleteMediaFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách các file đã upload
         * @param {number} [start] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFiles(start?: number, limit?: number, options?: any): AxiosPromise<GetMediaFilesResponse> {
            return localVarFp.getMediaFiles(start, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaFilesApi - object-oriented interface
 * @export
 * @class MediaFilesApi
 * @extends {BaseAPI}
 */
export class MediaFilesApi extends BaseAPI {
    /**
     * 
     * @summary Xóa các file media đã upload
     * @param {DeleteMediaFileRequest} deleteMediaFileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaFilesApi
     */
    public deleteMediaFiles(deleteMediaFileRequest: DeleteMediaFileRequest, options?: AxiosRequestConfig) {
        return MediaFilesApiFp(this.configuration).deleteMediaFiles(deleteMediaFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách các file đã upload
     * @param {number} [start] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaFilesApi
     */
    public getMediaFiles(start?: number, limit?: number, options?: AxiosRequestConfig) {
        return MediaFilesApiFp(this.configuration).getMediaFiles(start, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Xóa một hoặc nhiều thành viên
         * @param {DeleteMemberRequest} [deleteMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (deleteMemberRequest?: DeleteMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Xem thông tin chi tiết của thành viên
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailMember: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetailMember', 'id', id)
            const localVarPath = `/admin/cms-service/v1/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách thành viên
         * @param {GetListMemberRequest} [getListMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListMember: async (getListMemberRequest?: GetListMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/members/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Đăng ký thành viên mới
         * @param {RegisterMemberRequest} [registerMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerMember: async (registerMemberRequest?: RegisterMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/cms-service/v1/members/register-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Xóa một hoặc nhiều thành viên
         * @param {DeleteMemberRequest} [deleteMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(deleteMemberRequest?: DeleteMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(deleteMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Xem thông tin chi tiết của thành viên
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailMember(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailMember(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách thành viên
         * @param {GetListMemberRequest} [getListMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListMember(getListMemberRequest?: GetListMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListMember(getListMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Đăng ký thành viên mới
         * @param {RegisterMemberRequest} [registerMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerMember(registerMemberRequest?: RegisterMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerMember(registerMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * 
         * @summary Xóa một hoặc nhiều thành viên
         * @param {DeleteMemberRequest} [deleteMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(deleteMemberRequest?: DeleteMemberRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMember(deleteMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Xem thông tin chi tiết của thành viên
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailMember(id: number, options?: any): AxiosPromise<GetDetailMemberResponse> {
            return localVarFp.getDetailMember(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách thành viên
         * @param {GetListMemberRequest} [getListMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListMember(getListMemberRequest?: GetListMemberRequest, options?: any): AxiosPromise<GetListMemberResponse> {
            return localVarFp.getListMember(getListMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Đăng ký thành viên mới
         * @param {RegisterMemberRequest} [registerMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerMember(registerMemberRequest?: RegisterMemberRequest, options?: any): AxiosPromise<string> {
            return localVarFp.registerMember(registerMemberRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * 
     * @summary Xóa một hoặc nhiều thành viên
     * @param {DeleteMemberRequest} [deleteMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteMember(deleteMemberRequest?: DeleteMemberRequest, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteMember(deleteMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Xem thông tin chi tiết của thành viên
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getDetailMember(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getDetailMember(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách thành viên
     * @param {GetListMemberRequest} [getListMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getListMember(getListMemberRequest?: GetListMemberRequest, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getListMember(getListMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Đăng ký thành viên mới
     * @param {RegisterMemberRequest} [registerMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public registerMember(registerMemberRequest?: RegisterMemberRequest, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).registerMember(registerMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Tạo bài viết
         * @param {PostRequestBody} postRequestBody Tạo bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (postRequestBody: PostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRequestBody' is not null or undefined
            assertParamExists('createPost', 'postRequestBody', postRequestBody)
            const localVarPath = `/admin/cms-service/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Xóa bài viết
         * @param {RequestDeleteBody} requestDeleteBody Lấy id của các bài viết cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (requestDeleteBody: RequestDeleteBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestDeleteBody' is not null or undefined
            assertParamExists('deletePost', 'requestDeleteBody', requestDeleteBody)
            const localVarPath = `/admin/cms-service/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDeleteBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin chi tiết bài viết theo id
         * @summary Lấy thông tin chi tiết 1 bài viết
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetailPost', 'id', id)
            const localVarPath = `/admin/cms-service/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách bài viết
         * @param {ApiGetPostRequest} [apiGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListPost: async (apiGetPostRequest?: ApiGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cms-service/v1/posts/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách bài viết cho người dùng
         * @param {ApiGetPostRequest} [apiGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListPostForUser: async (apiGetPostRequest?: ApiGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/cms-service/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin chi tiết cho người dùng theo id
         * @summary Lấy thông tin chi tiết cho người dùng
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostForUserById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPostForUserById', 'id', id)
            const localVarPath = `/public/cms-service/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cập nhật bài viết
         * @param {PostRequestUpdateBody} postRequestUpdateBody Cập nhật bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (postRequestUpdateBody: PostRequestUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRequestUpdateBody' is not null or undefined
            assertParamExists('updatePost', 'postRequestUpdateBody', postRequestUpdateBody)
            const localVarPath = `/admin/cms-service/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequestUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Tạo bài viết
         * @param {PostRequestBody} postRequestBody Tạo bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(postRequestBody: PostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(postRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Xóa bài viết
         * @param {RequestDeleteBody} requestDeleteBody Lấy id của các bài viết cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(requestDeleteBody: RequestDeleteBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(requestDeleteBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin chi tiết bài viết theo id
         * @summary Lấy thông tin chi tiết 1 bài viết
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách bài viết
         * @param {ApiGetPostRequest} [apiGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListPost(apiGetPostRequest?: ApiGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListPost(apiGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách bài viết cho người dùng
         * @param {ApiGetPostRequest} [apiGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListPostForUser(apiGetPostRequest?: ApiGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListPostForUser(apiGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin chi tiết cho người dùng theo id
         * @summary Lấy thông tin chi tiết cho người dùng
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostForUserById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailPostPublicResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostForUserById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cập nhật bài viết
         * @param {PostRequestUpdateBody} postRequestUpdateBody Cập nhật bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(postRequestUpdateBody: PostRequestUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDataItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(postRequestUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * 
         * @summary Tạo bài viết
         * @param {PostRequestBody} postRequestBody Tạo bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(postRequestBody: PostRequestBody, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.createPost(postRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Xóa bài viết
         * @param {RequestDeleteBody} requestDeleteBody Lấy id của các bài viết cần xóa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(requestDeleteBody: RequestDeleteBody, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.deletePost(requestDeleteBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin chi tiết bài viết theo id
         * @summary Lấy thông tin chi tiết 1 bài viết
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailPost(id: number, options?: any): AxiosPromise<GetDetailPostResponse> {
            return localVarFp.getDetailPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách bài viết
         * @param {ApiGetPostRequest} [apiGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListPost(apiGetPostRequest?: ApiGetPostRequest, options?: any): AxiosPromise<GetListPostResponse> {
            return localVarFp.getListPost(apiGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách bài viết cho người dùng
         * @param {ApiGetPostRequest} [apiGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListPostForUser(apiGetPostRequest?: ApiGetPostRequest, options?: any): AxiosPromise<GetListPostResponse> {
            return localVarFp.getListPostForUser(apiGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin chi tiết cho người dùng theo id
         * @summary Lấy thông tin chi tiết cho người dùng
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostForUserById(id: number, options?: any): AxiosPromise<GetDetailPostPublicResponse> {
            return localVarFp.getPostForUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cập nhật bài viết
         * @param {PostRequestUpdateBody} postRequestUpdateBody Cập nhật bài viết
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(postRequestUpdateBody: PostRequestUpdateBody, options?: any): AxiosPromise<BaseDataItemResponse> {
            return localVarFp.updatePost(postRequestUpdateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 
     * @summary Tạo bài viết
     * @param {PostRequestBody} postRequestBody Tạo bài viết
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public createPost(postRequestBody: PostRequestBody, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).createPost(postRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Xóa bài viết
     * @param {RequestDeleteBody} requestDeleteBody Lấy id của các bài viết cần xóa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public deletePost(requestDeleteBody: RequestDeleteBody, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).deletePost(requestDeleteBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin chi tiết bài viết theo id
     * @summary Lấy thông tin chi tiết 1 bài viết
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getDetailPost(id: number, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getDetailPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách bài viết
     * @param {ApiGetPostRequest} [apiGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getListPost(apiGetPostRequest?: ApiGetPostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getListPost(apiGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách bài viết cho người dùng
     * @param {ApiGetPostRequest} [apiGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getListPostForUser(apiGetPostRequest?: ApiGetPostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getListPostForUser(apiGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin chi tiết cho người dùng theo id
     * @summary Lấy thông tin chi tiết cho người dùng
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPostForUserById(id: number, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPostForUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cập nhật bài viết
     * @param {PostRequestUpdateBody} postRequestUpdateBody Cập nhật bài viết
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public updatePost(postRequestUpdateBody: PostRequestUpdateBody, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).updatePost(postRequestUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecruitmentTemplatesApi - axios parameter creator
 * @export
 */
export const RecruitmentTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Tạo mẫu thông tin tuyển dụng
         * @param {CreateRecruitmentTemplateRequest} createRecruitmentTemplateRequest Tạo mẫu thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecruitmentTemplate: async (createRecruitmentTemplateRequest: CreateRecruitmentTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRecruitmentTemplateRequest' is not null or undefined
            assertParamExists('createRecruitmentTemplate', 'createRecruitmentTemplateRequest', createRecruitmentTemplateRequest)
            const localVarPath = `/admin/career-service/v1/recruitment-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRecruitmentTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Xóa mẫu thông tin tuyển dụng theo id
         * @summary Xóa mẫu thông tin tuyển dụng
         * @param {DeleteByIdsRequest} deleteByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecruitmentTemplates: async (deleteByIdsRequest: DeleteByIdsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteByIdsRequest' is not null or undefined
            assertParamExists('deleteRecruitmentTemplates', 'deleteByIdsRequest', deleteByIdsRequest)
            const localVarPath = `/admin/career-service/v1/recruitment-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteByIdsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin mẫu tuyển dụng theo id
         * @summary Lấy thông tin chi tiết mẫu thông tin tuyển dụng
         * @param {number} recruitmentTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailRecruitmentTemplate: async (recruitmentTemplateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recruitmentTemplateId' is not null or undefined
            assertParamExists('getDetailRecruitmentTemplate', 'recruitmentTemplateId', recruitmentTemplateId)
            const localVarPath = `/admin/career-service/v1/recruitment-templates/{recruitmentTemplateId}`
                .replace(`{${"recruitmentTemplateId"}}`, encodeURIComponent(String(recruitmentTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách mẫu thông tin tuyển dụng
         * @param {GetListRecruitmentTemplateRequest} [getListRecruitmentTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListRecruitmentTemplate: async (getListRecruitmentTemplateRequest?: GetListRecruitmentTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/career-service/v1/recruitment-templates/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListRecruitmentTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cập nhật mẫu thông tin tuyển dụng
         * @param {UpdateRecruitmentTemplateRequest} updateRecruitmentTemplateRequest Cập nhật mẫu thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecruitmentTemplate: async (updateRecruitmentTemplateRequest: UpdateRecruitmentTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRecruitmentTemplateRequest' is not null or undefined
            assertParamExists('updateRecruitmentTemplate', 'updateRecruitmentTemplateRequest', updateRecruitmentTemplateRequest)
            const localVarPath = `/admin/career-service/v1/recruitment-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecruitmentTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecruitmentTemplatesApi - functional programming interface
 * @export
 */
export const RecruitmentTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecruitmentTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Tạo mẫu thông tin tuyển dụng
         * @param {CreateRecruitmentTemplateRequest} createRecruitmentTemplateRequest Tạo mẫu thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecruitmentTemplate(createRecruitmentTemplateRequest: CreateRecruitmentTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRecruitmentTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecruitmentTemplate(createRecruitmentTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Xóa mẫu thông tin tuyển dụng theo id
         * @summary Xóa mẫu thông tin tuyển dụng
         * @param {DeleteByIdsRequest} deleteByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecruitmentTemplates(deleteByIdsRequest: DeleteByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRecruitmentTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecruitmentTemplates(deleteByIdsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin mẫu tuyển dụng theo id
         * @summary Lấy thông tin chi tiết mẫu thông tin tuyển dụng
         * @param {number} recruitmentTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailRecruitmentTemplate(recruitmentTemplateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailRecruitmentTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailRecruitmentTemplate(recruitmentTemplateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách mẫu thông tin tuyển dụng
         * @param {GetListRecruitmentTemplateRequest} [getListRecruitmentTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListRecruitmentTemplate(getListRecruitmentTemplateRequest?: GetListRecruitmentTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListRecruitmentTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListRecruitmentTemplate(getListRecruitmentTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cập nhật mẫu thông tin tuyển dụng
         * @param {UpdateRecruitmentTemplateRequest} updateRecruitmentTemplateRequest Cập nhật mẫu thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecruitmentTemplate(updateRecruitmentTemplateRequest: UpdateRecruitmentTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateRecruitmentTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecruitmentTemplate(updateRecruitmentTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecruitmentTemplatesApi - factory interface
 * @export
 */
export const RecruitmentTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecruitmentTemplatesApiFp(configuration)
    return {
        /**
         * 
         * @summary Tạo mẫu thông tin tuyển dụng
         * @param {CreateRecruitmentTemplateRequest} createRecruitmentTemplateRequest Tạo mẫu thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecruitmentTemplate(createRecruitmentTemplateRequest: CreateRecruitmentTemplateRequest, options?: any): AxiosPromise<CreateRecruitmentTemplateResponse> {
            return localVarFp.createRecruitmentTemplate(createRecruitmentTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Xóa mẫu thông tin tuyển dụng theo id
         * @summary Xóa mẫu thông tin tuyển dụng
         * @param {DeleteByIdsRequest} deleteByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecruitmentTemplates(deleteByIdsRequest: DeleteByIdsRequest, options?: any): AxiosPromise<DeleteRecruitmentTemplatesResponse> {
            return localVarFp.deleteRecruitmentTemplates(deleteByIdsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin mẫu tuyển dụng theo id
         * @summary Lấy thông tin chi tiết mẫu thông tin tuyển dụng
         * @param {number} recruitmentTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailRecruitmentTemplate(recruitmentTemplateId: number, options?: any): AxiosPromise<GetDetailRecruitmentTemplateResponse> {
            return localVarFp.getDetailRecruitmentTemplate(recruitmentTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách mẫu thông tin tuyển dụng
         * @param {GetListRecruitmentTemplateRequest} [getListRecruitmentTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListRecruitmentTemplate(getListRecruitmentTemplateRequest?: GetListRecruitmentTemplateRequest, options?: any): AxiosPromise<GetListRecruitmentTemplateResponse> {
            return localVarFp.getListRecruitmentTemplate(getListRecruitmentTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cập nhật mẫu thông tin tuyển dụng
         * @param {UpdateRecruitmentTemplateRequest} updateRecruitmentTemplateRequest Cập nhật mẫu thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecruitmentTemplate(updateRecruitmentTemplateRequest: UpdateRecruitmentTemplateRequest, options?: any): AxiosPromise<UpdateRecruitmentTemplateResponse> {
            return localVarFp.updateRecruitmentTemplate(updateRecruitmentTemplateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecruitmentTemplatesApi - object-oriented interface
 * @export
 * @class RecruitmentTemplatesApi
 * @extends {BaseAPI}
 */
export class RecruitmentTemplatesApi extends BaseAPI {
    /**
     * 
     * @summary Tạo mẫu thông tin tuyển dụng
     * @param {CreateRecruitmentTemplateRequest} createRecruitmentTemplateRequest Tạo mẫu thông tin tuyển dụng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentTemplatesApi
     */
    public createRecruitmentTemplate(createRecruitmentTemplateRequest: CreateRecruitmentTemplateRequest, options?: AxiosRequestConfig) {
        return RecruitmentTemplatesApiFp(this.configuration).createRecruitmentTemplate(createRecruitmentTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Xóa mẫu thông tin tuyển dụng theo id
     * @summary Xóa mẫu thông tin tuyển dụng
     * @param {DeleteByIdsRequest} deleteByIdsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentTemplatesApi
     */
    public deleteRecruitmentTemplates(deleteByIdsRequest: DeleteByIdsRequest, options?: AxiosRequestConfig) {
        return RecruitmentTemplatesApiFp(this.configuration).deleteRecruitmentTemplates(deleteByIdsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin mẫu tuyển dụng theo id
     * @summary Lấy thông tin chi tiết mẫu thông tin tuyển dụng
     * @param {number} recruitmentTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentTemplatesApi
     */
    public getDetailRecruitmentTemplate(recruitmentTemplateId: number, options?: AxiosRequestConfig) {
        return RecruitmentTemplatesApiFp(this.configuration).getDetailRecruitmentTemplate(recruitmentTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách mẫu thông tin tuyển dụng
     * @param {GetListRecruitmentTemplateRequest} [getListRecruitmentTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentTemplatesApi
     */
    public getListRecruitmentTemplate(getListRecruitmentTemplateRequest?: GetListRecruitmentTemplateRequest, options?: AxiosRequestConfig) {
        return RecruitmentTemplatesApiFp(this.configuration).getListRecruitmentTemplate(getListRecruitmentTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cập nhật mẫu thông tin tuyển dụng
     * @param {UpdateRecruitmentTemplateRequest} updateRecruitmentTemplateRequest Cập nhật mẫu thông tin tuyển dụng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentTemplatesApi
     */
    public updateRecruitmentTemplate(updateRecruitmentTemplateRequest: UpdateRecruitmentTemplateRequest, options?: AxiosRequestConfig) {
        return RecruitmentTemplatesApiFp(this.configuration).updateRecruitmentTemplate(updateRecruitmentTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecruitmentsApi - axios parameter creator
 * @export
 */
export const RecruitmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Tạo thông tin tuyển dụng
         * @param {CreateRecruitmentRequest} createRecruitmentRequest Tạo thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecruitment: async (createRecruitmentRequest: CreateRecruitmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRecruitmentRequest' is not null or undefined
            assertParamExists('createRecruitment', 'createRecruitmentRequest', createRecruitmentRequest)
            const localVarPath = `/admin/career-service/v1/recruitments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRecruitmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Xóa thông tin tuyển dụng theo id
         * @summary Xóa thông tin tuyển dụng
         * @param {DeleteByIdsRequest} deleteByIdsRequest Cập nhật thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecruitments: async (deleteByIdsRequest: DeleteByIdsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteByIdsRequest' is not null or undefined
            assertParamExists('deleteRecruitments', 'deleteByIdsRequest', deleteByIdsRequest)
            const localVarPath = `/admin/career-service/v1/recruitments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteByIdsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lấy thông tin tuyển dụng theo id
         * @summary Lấy thông tin chi tiết thông tin tuyển dụng
         * @param {number} recruitmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailRecruitment: async (recruitmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recruitmentId' is not null or undefined
            assertParamExists('getDetailRecruitment', 'recruitmentId', recruitmentId)
            const localVarPath = `/admin/career-service/v1/recruitments/{recruitmentId}`
                .replace(`{${"recruitmentId"}}`, encodeURIComponent(String(recruitmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lấy danh sách thông tin tuyển dụng
         * @param {GetListRecruitmentRequest} [getListRecruitmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListRecruitment: async (getListRecruitmentRequest?: GetListRecruitmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/career-service/v1/recruitments/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListRecruitmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cập nhật thông tin tuyển dụng
         * @param {UpdateRecruitmentRequest} updateRecruitmentRequest Cập nhật thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecruitment: async (updateRecruitmentRequest: UpdateRecruitmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRecruitmentRequest' is not null or undefined
            assertParamExists('updateRecruitment', 'updateRecruitmentRequest', updateRecruitmentRequest)
            const localVarPath = `/admin/career-service/v1/recruitments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecruitmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cập nhật trạng thái danh sách thông tin tuyển dụng
         * @param {UpdateStateRecruitmentRequest} [updateStateRecruitmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStateRecruitments: async (updateStateRecruitmentRequest?: UpdateStateRecruitmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/career-service/v1/recruitments/updateState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStateRecruitmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecruitmentsApi - functional programming interface
 * @export
 */
export const RecruitmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecruitmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Tạo thông tin tuyển dụng
         * @param {CreateRecruitmentRequest} createRecruitmentRequest Tạo thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecruitment(createRecruitmentRequest: CreateRecruitmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRecruitmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecruitment(createRecruitmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Xóa thông tin tuyển dụng theo id
         * @summary Xóa thông tin tuyển dụng
         * @param {DeleteByIdsRequest} deleteByIdsRequest Cập nhật thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecruitments(deleteByIdsRequest: DeleteByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRecruitmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecruitments(deleteByIdsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lấy thông tin tuyển dụng theo id
         * @summary Lấy thông tin chi tiết thông tin tuyển dụng
         * @param {number} recruitmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailRecruitment(recruitmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDetailRecruitmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailRecruitment(recruitmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lấy danh sách thông tin tuyển dụng
         * @param {GetListRecruitmentRequest} [getListRecruitmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListRecruitment(getListRecruitmentRequest?: GetListRecruitmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListRecruitmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListRecruitment(getListRecruitmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cập nhật thông tin tuyển dụng
         * @param {UpdateRecruitmentRequest} updateRecruitmentRequest Cập nhật thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecruitment(updateRecruitmentRequest: UpdateRecruitmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateRecruitmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecruitment(updateRecruitmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cập nhật trạng thái danh sách thông tin tuyển dụng
         * @param {UpdateStateRecruitmentRequest} [updateStateRecruitmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStateRecruitments(updateStateRecruitmentRequest?: UpdateStateRecruitmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateStateRecruitmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStateRecruitments(updateStateRecruitmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecruitmentsApi - factory interface
 * @export
 */
export const RecruitmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecruitmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Tạo thông tin tuyển dụng
         * @param {CreateRecruitmentRequest} createRecruitmentRequest Tạo thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecruitment(createRecruitmentRequest: CreateRecruitmentRequest, options?: any): AxiosPromise<CreateRecruitmentResponse> {
            return localVarFp.createRecruitment(createRecruitmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Xóa thông tin tuyển dụng theo id
         * @summary Xóa thông tin tuyển dụng
         * @param {DeleteByIdsRequest} deleteByIdsRequest Cập nhật thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecruitments(deleteByIdsRequest: DeleteByIdsRequest, options?: any): AxiosPromise<DeleteRecruitmentsResponse> {
            return localVarFp.deleteRecruitments(deleteByIdsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lấy thông tin tuyển dụng theo id
         * @summary Lấy thông tin chi tiết thông tin tuyển dụng
         * @param {number} recruitmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailRecruitment(recruitmentId: number, options?: any): AxiosPromise<GetDetailRecruitmentResponse> {
            return localVarFp.getDetailRecruitment(recruitmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lấy danh sách thông tin tuyển dụng
         * @param {GetListRecruitmentRequest} [getListRecruitmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListRecruitment(getListRecruitmentRequest?: GetListRecruitmentRequest, options?: any): AxiosPromise<GetListRecruitmentResponse> {
            return localVarFp.getListRecruitment(getListRecruitmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cập nhật thông tin tuyển dụng
         * @param {UpdateRecruitmentRequest} updateRecruitmentRequest Cập nhật thông tin tuyển dụng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecruitment(updateRecruitmentRequest: UpdateRecruitmentRequest, options?: any): AxiosPromise<UpdateRecruitmentResponse> {
            return localVarFp.updateRecruitment(updateRecruitmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cập nhật trạng thái danh sách thông tin tuyển dụng
         * @param {UpdateStateRecruitmentRequest} [updateStateRecruitmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStateRecruitments(updateStateRecruitmentRequest?: UpdateStateRecruitmentRequest, options?: any): AxiosPromise<UpdateStateRecruitmentResponse> {
            return localVarFp.updateStateRecruitments(updateStateRecruitmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecruitmentsApi - object-oriented interface
 * @export
 * @class RecruitmentsApi
 * @extends {BaseAPI}
 */
export class RecruitmentsApi extends BaseAPI {
    /**
     * 
     * @summary Tạo thông tin tuyển dụng
     * @param {CreateRecruitmentRequest} createRecruitmentRequest Tạo thông tin tuyển dụng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentsApi
     */
    public createRecruitment(createRecruitmentRequest: CreateRecruitmentRequest, options?: AxiosRequestConfig) {
        return RecruitmentsApiFp(this.configuration).createRecruitment(createRecruitmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Xóa thông tin tuyển dụng theo id
     * @summary Xóa thông tin tuyển dụng
     * @param {DeleteByIdsRequest} deleteByIdsRequest Cập nhật thông tin tuyển dụng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentsApi
     */
    public deleteRecruitments(deleteByIdsRequest: DeleteByIdsRequest, options?: AxiosRequestConfig) {
        return RecruitmentsApiFp(this.configuration).deleteRecruitments(deleteByIdsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lấy thông tin tuyển dụng theo id
     * @summary Lấy thông tin chi tiết thông tin tuyển dụng
     * @param {number} recruitmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentsApi
     */
    public getDetailRecruitment(recruitmentId: number, options?: AxiosRequestConfig) {
        return RecruitmentsApiFp(this.configuration).getDetailRecruitment(recruitmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lấy danh sách thông tin tuyển dụng
     * @param {GetListRecruitmentRequest} [getListRecruitmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentsApi
     */
    public getListRecruitment(getListRecruitmentRequest?: GetListRecruitmentRequest, options?: AxiosRequestConfig) {
        return RecruitmentsApiFp(this.configuration).getListRecruitment(getListRecruitmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cập nhật thông tin tuyển dụng
     * @param {UpdateRecruitmentRequest} updateRecruitmentRequest Cập nhật thông tin tuyển dụng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentsApi
     */
    public updateRecruitment(updateRecruitmentRequest: UpdateRecruitmentRequest, options?: AxiosRequestConfig) {
        return RecruitmentsApiFp(this.configuration).updateRecruitment(updateRecruitmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cập nhật trạng thái danh sách thông tin tuyển dụng
     * @param {UpdateStateRecruitmentRequest} [updateStateRecruitmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentsApi
     */
    public updateStateRecruitments(updateStateRecruitmentRequest?: UpdateStateRecruitmentRequest, options?: AxiosRequestConfig) {
        return RecruitmentsApiFp(this.configuration).updateStateRecruitments(updateStateRecruitmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload file ảnh để biên tập bài viết
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUploadServiceV1CmsUploadPost: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/upload-service/v1/cms-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload file ảnh để biên tập bài viết
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUploadServiceV1CmsUploadPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUploadServiceV1CmsUploadPost(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload file ảnh để biên tập bài viết
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUploadServiceV1CmsUploadPost(file?: File, options?: any): AxiosPromise<UploadFileResponse> {
            return localVarFp.adminUploadServiceV1CmsUploadPost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * 
     * @summary Upload file ảnh để biên tập bài viết
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public adminUploadServiceV1CmsUploadPost(file?: File, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).adminUploadServiceV1CmsUploadPost(file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lấy danh sách user quản trị
         * @param {GetListUserRequest} [getListUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (getListUserRequest?: GetListUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user-service/v1/users/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Lấy danh sách user quản trị
         * @param {GetListUserRequest} [getListUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(getListUserRequest?: GetListUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(getListUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Lấy danh sách user quản trị
         * @param {GetListUserRequest} [getListUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(getListUserRequest?: GetListUserRequest, options?: any): AxiosPromise<GetListUserResponse> {
            return localVarFp.getUsers(getListUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Lấy danh sách user quản trị
     * @param {GetListUserRequest} [getListUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(getListUserRequest?: GetListUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(getListUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


